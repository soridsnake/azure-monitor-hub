{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentName": {
      "type": "string",
      "metadata": {
        "description": "Unique name for this monitoring deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "useExistingLogAnalytics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use an existing Log Analytics workspace"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of existing Log Analytics workspace"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Log Analytics workspace"
      }
    },
    "retentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Number of days to retain data in Log Analytics"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use an existing User-Assigned Managed Identity"
      }
    },
    "existingManagedIdentityId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of existing Managed Identity"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Name of the User-Assigned Managed Identity"
      }
    },
    "dcrNameWindows": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-unified', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the unified Data Collection Rule for Windows and Linux"
      }
    },
    "dcrNameLinux": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-unified', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the unified Data Collection Rule (same as Windows)"
      }
    },
    "monitorExistingVMs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Monitor existing Azure VMs during deployment"
      }
    },
    "monitorAllVMs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Automatically discover and monitor all Azure VMs in subscription"
      }
    },
    "selectedVMIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of Azure VM Resource IDs to monitor"
      }
    },
    "monitorExistingArcServers": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Monitor existing Arc-enabled servers during deployment"
      }
    },
    "monitorAllArcServers": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Automatically discover and monitor all Arc servers in subscription"
      }
    },
    "selectedArcServerIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of Arc Server Resource IDs to monitor"
      }
    },
    "enableAzureVMPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Policy for automatic Azure VM enrollment"
      }
    },
    "azureVMPolicyAssignmentName": {
      "type": "string",
      "defaultValue": "[format('ama-vm-monitoring-{0}', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Azure VM Policy assignment"
      }
    },
    "enableArcPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Policy for automatic Arc server enrollment"
      }
    },
    "arcPolicyAssignmentName": {
      "type": "string",
      "defaultValue": "[format('ama-arc-monitoring-{0}', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Arc Policy assignment"
      }
    },
    "enableProcessesAndDependencies": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable VM Insights processes and dependencies for Arc servers"
      }
    },
    "enableChangeTracking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Change Tracking & Inventory"
      }
    },
    "changeTrackingDcrName": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-changetracking', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Change Tracking Data Collection Rule"
      }
    },
    "enableChangeTrackingAzureVM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Change Tracking for Azure VMs"
      }
    },
    "enableChangeTrackingArc": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Change Tracking for Arc servers"
      }
    },
    "enableCPUAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable CPU utilization alerts"
      }
    },
    "cpuThreshold": {
      "type": "int",
      "defaultValue": 95,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "CPU threshold percentage for alerts"
      }
    },
    "enableMemoryAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable memory utilization alerts"
      }
    },
    "memoryThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "Memory threshold percentage for alerts"
      }
    },
    "enableDiskAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable disk space alerts"
      }
    },
    "diskThreshold": {
      "type": "int",
      "defaultValue": 95,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "Disk usage threshold percentage for alerts"
      }
    },
    "enableHeartbeatAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable VM heartbeat alerts"
      }
    },
    "createActionGroup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create an Action Group for alerts"
      }
    },
    "actionGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Action Group"
      }
    },
    "emailRecipients": {
      "type": "string",
      "metadata": {
        "description": "Semicolon-separated email addresses for alert notifications"
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to resources"
      }
    }
  },
  "variables": {
    "workspaceName": "[if(parameters('useExistingLogAnalytics'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], parameters('logAnalyticsWorkspaceName'))]",
    "workspaceId": "[if(parameters('useExistingLogAnalytics'), parameters('existingLogAnalyticsWorkspaceId'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')))]",
    "managedIdentityId": "[if(parameters('useExistingManagedIdentity'), parameters('existingManagedIdentityId'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]",
    "dcrName": "[format('dcr-{0}-unified', parameters('deploymentName'))]",
    "changeTrackingDcrName": "[parameters('changeTrackingDcrName')]"
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingLogAnalytics'))]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.OperationalInsights/workspaces'), parameters('tagsByResource')['Microsoft.OperationalInsights/workspaces'], json('{}'))]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('retentionInDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], json('{}'))]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('roleAssignment-{0}', parameters('deploymentName'))]",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "principalId": {
            "value": "[if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId)]"
          },
          "deploymentName": {
            "value": "[parameters('deploymentName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "deploymentName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, parameters('principalId'), parameters('deploymentName'), 'Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "Allows Managed Identity to deploy monitoring resources and configure VMs and Arc servers"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, parameters('principalId'), parameters('deploymentName'), 'ManagedIdentityOperator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "Allows Managed Identity to assign itself to VMs and Arc servers"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, parameters('principalId'), parameters('deploymentName'), 'VirtualMachineContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "Allows Managed Identity to manage VM extensions"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, parameters('principalId'), parameters('deploymentName'), 'AzureConnectedMachineResourceAdministrator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd570a14-e51a-42ad-bac8-bafd67325302')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "Allows Managed Identity to manage Arc-enabled servers"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[variables('dcrName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/dataCollectionRules'), parameters('tagsByResource')['Microsoft.Insights/dataCollectionRules'], json('{}'))]",
      "properties": {
        "dataSources": {
          "performanceCounters": [
            {
              "name": "VMInsightsPerfCounters",
              "samplingFrequencyInSeconds": 60,
              "streams": ["Microsoft-InsightsMetrics"],
              "counterSpecifiers": [
                "\\VmInsights\\DetailedMetrics"
              ]
            }
          ],
          "syslog": [
            {
              "name": "syslogDataSource",
              "streams": ["Microsoft-Syslog"],
              "facilityNames": ["auth", "authpriv", "cron", "daemon", "kern", "syslog"],
              "logLevels": ["Error", "Critical", "Alert", "Emergency"]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "VMInsightsPerf-Logs-Dest",
              "workspaceResourceId": "[variables('workspaceId')]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": ["Microsoft-InsightsMetrics"],
            "destinations": ["VMInsightsPerf-Logs-Dest"]
          },
          {
            "streams": ["Microsoft-Syslog"],
            "destinations": ["VMInsightsPerf-Logs-Dest"]
          }
        ],
        "description": "Unified Data Collection Rule for Azure VMs, Arc servers, Windows and Linux monitoring with VM Insights"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('monitorExistingVMs')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('setup-azure-vms-{0}', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], json('{}'))]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', variables('managedIdentityId'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT60M",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format('-VMIdsBase64 \"{0}\" -MonitorAllVMs ${1} -DCRId \"{2}\" -EnableChangeTracking ${3} -ChangeTrackingDCRName \"{4}\" -WorkspaceId \"{5}\" -ResourceGroupName \"{6}\" -Location \"{7}\"', base64(string(parameters('selectedVMIds'))), parameters('monitorAllVMs'), resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName')), if(parameters('enableChangeTracking'), parameters('enableChangeTrackingAzureVM'), false()), variables('changeTrackingDcrName'), variables('workspaceId'), resourceGroup().name, parameters('location'))]",
        "scriptContent": "param(\n    [string]$VMIdsBase64,\n    [bool]$MonitorAllVMs,\n    [string]$DCRId,\n    [bool]$EnableChangeTracking,\n    [string]$ChangeTrackingDCRName,\n    [string]$WorkspaceId,\n    [string]$ResourceGroupName,\n    [string]$Location\n)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"Azure VM Monitoring Setup\"\nWrite-Host \"========================================\"\nWrite-Host \"Monitor All VMs: $MonitorAllVMs\"\nWrite-Host \"DCR ID: $DCRId\"\nWrite-Host \"Enable Change Tracking: $EnableChangeTracking\"\nWrite-Host \"Change Tracking DCR Name: $ChangeTrackingDCRName\"\nWrite-Host \"Workspace ID: $WorkspaceId\"\nWrite-Host \"\"\n\n# Wait for role propagation\nWrite-Host \"Waiting 60 seconds for role assignment propagation...\"\nStart-Sleep -Seconds 60\n\n$vmArray = @()\n\nif ($MonitorAllVMs) {\n    Write-Host \"Discovering all Azure VMs in subscription...\"\n    try {\n        $allVMs = Get-AzVM -ErrorAction Stop\n        Write-Host \"Found $($allVMs.Count) Azure VMs\"\n        \n        foreach ($vm in $allVMs) {\n            $vmArray += $vm.Id\n            Write-Host \"  - $($vm.Name)\"\n        }\n    }\n    catch {\n        Write-Host \"ERROR: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\nelse {\n    Write-Host \"Decoding VM IDs from Base64...\"\n    \n    try {\n        $VMIdsJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($VMIdsBase64))\n        Write-Host \"Decoded JSON: $VMIdsJson\"\n        \n        if([string]::IsNullOrWhiteSpace($VMIdsJson) -or $VMIdsJson -eq '[]') {\n            Write-Host \"ERROR: No VMs provided!\" -ForegroundColor Red\n            exit 1\n        }\n        \n        $vmArray = $VMIdsJson | ConvertFrom-Json\n        Write-Host \"Parsed $($vmArray.Count) VM(s)\"\n    }\n    catch {\n        Write-Host \"ERROR: Failed to decode/parse: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\n\nif ($vmArray.Count -eq 0) {\n    Write-Host \"No Azure VMs to process\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'NoVMs'\n    exit 0\n}\n\nWrite-Host \"\"\nWrite-Host \"Processing $($vmArray.Count) Azure VM(s)...\"\nWrite-Host \"\"\n\n$results = @()\n$successCount = 0\n$partialCount = 0\n$failCount = 0\n$changeTrackingDCRId = \"\"\n$ctDcrCreated = $false\n\nforeach ($vmId in $vmArray) {\n    Write-Host \"========================================\"\n    Write-Host \"Processing: $vmId\" -ForegroundColor Cyan\n    Write-Host \"========================================\"\n    \n    $vmName = $vmId.Split('/')[-1]\n    $vmRG = $vmId.Split('/')[4]\n    \n    Write-Host \"VM Name: $vmName\"\n    Write-Host \"Resource Group: $vmRG\"\n    \n    $amaInstalled = $false\n    $dcrAssociated = $false\n    $ctInstalled = $false\n    $ctDcrAssociated = $false\n    $vmRunning = $false\n    $vmStatus = \"Unknown\"\n    $errorMessage = \"\"\n    \n    try {\n        # Get VM details\n        $vm = Get-AzVM -ResourceGroupName $vmRG -Name $vmName -ErrorAction Stop\n        $osType = $vm.StorageProfile.OsDisk.OsType\n        $location = $vm.Location\n        \n        # Get VM status\n        $vmStatusObj = Get-AzVM -ResourceGroupName $vmRG -Name $vmName -Status -ErrorAction Stop\n        $powerState = $vmStatusObj.Statuses | Where-Object { $_.Code -like 'PowerState/*' } | Select-Object -First 1\n        $vmStatus = if($powerState) { $powerState.Code.Replace('PowerState/', '') } else { 'unknown' }\n        $vmRunning = ($vmStatus -eq 'running')\n        \n        Write-Host \"OS Type: $osType\"\n        Write-Host \"Location: $location\"\n        Write-Host \"Status: $vmStatus\" -ForegroundColor $(if($vmRunning) { 'Green' } else { 'Yellow' })\n        Write-Host \"\"\n        \n        # Determine extension details\n        if ($osType -eq \"Linux\") {\n            $extensionName = \"AzureMonitorLinuxAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorLinuxAgent\"\n            $extensionVersion = \"1.28\"\n            $ctExtensionName = \"ChangeTracking-Linux\"\n            $ctExtensionPublisher = \"Microsoft.Azure.ChangeTrackingAndInventory\"\n            $ctExtensionType = \"ChangeTracking-Linux\"\n        }\n        else {\n            $extensionName = \"AzureMonitorWindowsAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorWindowsAgent\"\n            $extensionVersion = \"1.22\"\n            $ctExtensionName = \"ChangeTracking-Windows\"\n            $ctExtensionPublisher = \"Microsoft.Azure.ChangeTrackingAndInventory\"\n            $ctExtensionType = \"ChangeTracking-Windows\"\n        }\n        \n        # Step 1: Check and install AMA\n        Write-Host \"[1/4] Azure Monitor Agent...\" -ForegroundColor Yellow\n        \n        if ($vmRunning) {\n            $existingExtension = Get-AzVMExtension `\n                -ResourceGroupName $vmRG `\n                -VMName $vmName `\n                -Name $extensionName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingExtension) {\n                Write-Host \"  ✓ AMA already installed (v$($existingExtension.TypeHandlerVersion))\" -ForegroundColor Green\n                $amaInstalled = $true\n            }\n            else {\n                Write-Host \"  Installing Azure Monitor Agent...\" -ForegroundColor Cyan\n                \n                try {\n                    $extensionResult = Set-AzVMExtension `\n                        -ResourceGroupName $vmRG `\n                        -VMName $vmName `\n                        -Name $extensionName `\n                        -Publisher $extensionPublisher `\n                        -ExtensionType $extensionType `\n                        -TypeHandlerVersion $extensionVersion `\n                        -EnableAutomaticUpgrade $true `\n                        -Location $location `\n                        -ErrorAction Stop\n                    \n                    Write-Host \"  ✓ AMA installed successfully\" -ForegroundColor Green\n                    $amaInstalled = $true\n                }\n                catch {\n                    Write-Host \"  ✗ Failed to install AMA: $($_.Exception.Message)\" -ForegroundColor Red\n                    $errorMessage = \"AMA: $($_.Exception.Message)\"\n                    $amaInstalled = $false\n                }\n            }\n        }\n        else {\n            Write-Host \"  ⚠ VM is stopped - AMA will be installed when VM starts\" -ForegroundColor Yellow\n            $amaInstalled = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Step 2: Associate DCR\n        Write-Host \"[2/4] Data Collection Rule Association...\" -ForegroundColor Yellow\n        \n        $associationName = \"dcr-association-$vmName\"\n        \n        try {\n            $existingAssociation = Get-AzDataCollectionRuleAssociation `\n                -TargetResourceId $vmId `\n                -AssociationName $associationName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingAssociation) {\n                Write-Host \"  ✓ DCR association already exists\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n            else {\n                $association = New-AzDataCollectionRuleAssociation `\n                    -TargetResourceId $vmId `\n                    -AssociationName $associationName `\n                    -DataCollectionRuleId $DCRId `\n                    -ErrorAction Stop\n                \n                Write-Host \"  ✓ DCR associated successfully\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n        }\n        catch {\n            Write-Host \"  ✗ Failed to associate DCR: $($_.Exception.Message)\" -ForegroundColor Red\n            if ($errorMessage) {\n                $errorMessage += \"; DCR: $($_.Exception.Message)\"\n            } else {\n                $errorMessage = \"DCR: $($_.Exception.Message)\"\n            }\n            $dcrAssociated = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Step 3: Install Change Tracking Extension (if enabled)\n        if ($EnableChangeTracking) {\n            Write-Host \"[3/4] Change Tracking Extension...\" -ForegroundColor Yellow\n            \n            if ($vmRunning) {\n                $existingCTExtension = Get-AzVMExtension `\n                    -ResourceGroupName $vmRG `\n                    -VMName $vmName `\n                    -Name $ctExtensionName `\n                    -ErrorAction SilentlyContinue\n                \n                if ($existingCTExtension) {\n                    Write-Host \"  ✓ Change Tracking extension already installed\" -ForegroundColor Green\n                    $ctInstalled = $true\n                }\n                else {\n                    Write-Host \"  Installing Change Tracking extension...\" -ForegroundColor Cyan\n                    \n                    try {\n                        $ctExtensionResult = Set-AzVMExtension `\n                            -ResourceGroupName $vmRG `\n                            -VMName $vmName `\n                            -Name $ctExtensionName `\n                            -Publisher $ctExtensionPublisher `\n                            -ExtensionType $ctExtensionType `\n                            -TypeHandlerVersion \"2.0\" `\n                            -EnableAutomaticUpgrade $true `\n                            -Location $location `\n                            -ErrorAction Stop\n                        \n                        Write-Host \"  ✓ Change Tracking extension installed successfully\" -ForegroundColor Green\n                        $ctInstalled = $true\n                        \n                        # Wait for tables to be created\n                        if (-not $ctDcrCreated) {\n                            Write-Host \"  ⏳ Waiting for Change Tracking tables to be created...\" -ForegroundColor Cyan\n                            Start-Sleep -Seconds 120\n                        }\n                    }\n                    catch {\n                        Write-Host \"  ✗ Failed to install Change Tracking extension: $($_.Exception.Message)\" -ForegroundColor Red\n                        if ($errorMessage) {\n                            $errorMessage += \"; CT: $($_.Exception.Message)\"\n                        } else {\n                            $errorMessage = \"CT: $($_.Exception.Message)\"\n                        }\n                        $ctInstalled = $false\n                    }\n                }\n            }\n            else {\n                Write-Host \"  ⚠ VM is stopped - Change Tracking will be installed when VM starts\" -ForegroundColor Yellow\n                $ctInstalled = $false\n            }\n            \n            Write-Host \"\"\n        }\n    }\n    catch {\n        Write-Host \"\"\n        Write-Host \"✗ FAILED: $($_.Exception.Message)\" -ForegroundColor Red\n        Write-Host \"\"\n        \n        $failCount++\n        \n        $results += @{\n            VMName = $vmName\n            Status = \"Failed\"\n            Error = $_.Exception.Message\n        }\n        continue\n    }\n    \n    # Determine overall status\n    $allGood = $dcrAssociated -and ($amaInstalled -or -not $vmRunning)\n    if($EnableChangeTracking) {\n        $allGood = $allGood -and ($ctInstalled -or -not $vmRunning)\n    }\n    \n    if ($allGood) {\n        Write-Host \"✓ Azure VM configured successfully!\" -ForegroundColor Green\n        if (-not $vmRunning) {\n            Write-Host \"  Note: Start the VM to complete extension installation\" -ForegroundColor Cyan\n        }\n        $successCount++\n        $status = \"Success\"\n    }\n    elseif ($dcrAssociated) {\n        Write-Host \"⚠ Partially configured\" -ForegroundColor Yellow\n        $partialCount++\n        $status = \"Partial\"\n    }\n    else {\n        Write-Host \"✗ Configuration failed\" -ForegroundColor Red\n        $failCount++\n        $status = \"Failed\"\n    }\n    \n    Write-Host \"\"\n    \n    $results += @{\n        VMName = $vmName\n        Status = $status\n        OSType = $osType\n        VMStatus = $vmStatus\n        AMAInstalled = $amaInstalled\n        DCRAssociated = $dcrAssociated\n        CTInstalled = $ctInstalled\n        Error = $errorMessage\n    }\n}\n\n# CREATE CHANGE TRACKING DCR (after at least one extension is installed)\nif ($EnableChangeTracking -and $successCount -gt 0) {\n    Write-Host \"========================================\"\n    Write-Host \"Creating Change Tracking DCR\"\n    Write-Host \"========================================\"\n    \n    try {\n        # Check if DCR already exists\n        $existingDCR = Get-AzDataCollectionRule -ResourceGroupName $ResourceGroupName -Name $ChangeTrackingDCRName -ErrorAction SilentlyContinue\n        \n        if ($existingDCR) {\n            Write-Host \"✓ Change Tracking DCR already exists\" -ForegroundColor Green\n            $changeTrackingDCRId = $existingDCR.Id\n            $ctDcrCreated = $true\n        }\n        else {\n            Write-Host \"Creating new Change Tracking DCR...\" -ForegroundColor Cyan\n            \n            # Build DCR JSON using REST API\n            $dcrBody = @{\n                location = $Location\n                properties = @{\n                    dataSources = @{\n                        extensions = @(\n                            @{\n                                name = \"CTDataSource-Windows\"\n                                streams = @(\n                                    \"Microsoft-ConfigurationChange\"\n                                    \"Microsoft-ConfigurationChangeV2\"\n                                    \"Microsoft-ConfigurationData\"\n                                )\n                                extensionName = \"ChangeTracking-Windows\"\n                                extensionSettings = @{\n                                    enableFiles = $true\n                                    enableSoftware = $true\n                                    enableRegistry = $true\n                                    enableServices = $true\n                                    enableInventory = $true\n                                    registrySettings = @{\n                                        registryCollectionFrequency = 3000\n                                        registryInfo = @(\n                                            @{\n                                                name = \"Registry_1\"\n                                                groupTag = \"Recommended\"\n                                                enabled = $false\n                                                recurse = $true\n                                                description = \"\"\n                                                keyName = \"HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Group Policy\\\\Scripts\\\\Startup\"\n                                                valueName = \"\"\n                                            }\n                                            @{\n                                                name = \"Registry_2\"\n                                                groupTag = \"Recommended\"\n                                                enabled = $false\n                                                recurse = $true\n                                                description = \"\"\n                                                keyName = \"HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Group Policy\\\\Scripts\\\\Shutdown\"\n                                                valueName = \"\"\n                                            }\n                                        )\n                                    }\n                                    fileSettings = @{\n                                        fileCollectionFrequency = 2700\n                                    }\n                                    softwareSettings = @{\n                                        softwareCollectionFrequency = 1800\n                                    }\n                                    inventorySettings = @{\n                                        inventoryCollectionFrequency = 36000\n                                    }\n                                    serviceSettings = @{\n                                        serviceCollectionFrequency = 1800\n                                    }\n                                }\n                            }\n                            @{\n                                name = \"CTDataSource-Linux\"\n                                streams = @(\n                                    \"Microsoft-ConfigurationChange\"\n                                    \"Microsoft-ConfigurationChangeV2\"\n                                    \"Microsoft-ConfigurationData\"\n                                )\n                                extensionName = \"ChangeTracking-Linux\"\n                                extensionSettings = @{\n                                    enableFiles = $true\n                                    enableSoftware = $true\n                                    enableRegistry = $false\n                                    enableServices = $true\n                                    enableInventory = $true\n                                    fileSettings = @{\n                                        fileCollectionFrequency = 900\n                                        fileInfo = @(\n                                            @{\n                                                name = \"ChangeTrackingLinuxPath_default\"\n                                                enabled = $true\n                                                destinationPath = \"/etc/*.conf\"\n                                                useSudo = $true\n                                                recurse = $true\n                                                maxContentsReturnable = 5000000\n                                                pathType = \"File\"\n                                                type = \"File\"\n                                                links = \"Follow\"\n                                                maxOutputSize = 500000\n                                                groupTag = \"Recommended\"\n                                            }\n                                        )\n                                    }\n                                    softwareSettings = @{\n                                        softwareCollectionFrequency = 300\n                                    }\n                                    inventorySettings = @{\n                                        inventoryCollectionFrequency = 36000\n                                    }\n                                    serviceSettings = @{\n                                        serviceCollectionFrequency = 300\n                                    }\n                                }\n                            }\n                        )\n                    }\n                    destinations = @{\n                        logAnalytics = @(\n                            @{\n                                name = \"Microsoft-CT-Dest\"\n                                workspaceResourceId = $WorkspaceId\n                            }\n                        )\n                    }\n                    dataFlows = @(\n                        @{\n                            streams = @(\n                                \"Microsoft-ConfigurationChange\"\n                                \"Microsoft-ConfigurationChangeV2\"\n                                \"Microsoft-ConfigurationData\"\n                            )\n                            destinations = @(\"Microsoft-CT-Dest\")\n                        }\n                    )\n                    description = \"Data Collection Rule for Change Tracking and Inventory\"\n                }\n            } | ConvertTo-Json -Depth 20\n            \n            # Get subscription ID from WorkspaceId\n            $subscriptionId = $WorkspaceId.Split('/')[2]\n            \n            # Create DCR using REST API\n            $dcrUri = \"https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.Insights/dataCollectionRules/$ChangeTrackingDCRName`?api-version=2022-06-01\"\n            \n            Write-Host \"  DCR URI: $dcrUri\" -ForegroundColor Gray\n            Write-Host \"  Creating DCR via REST API...\" -ForegroundColor Cyan\n            \n            $response = Invoke-AzRestMethod -Uri $dcrUri -Method PUT -Payload $dcrBody\n            \n            if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 201) {\n                $responseContent = $response.Content | ConvertFrom-Json\n                $changeTrackingDCRId = $responseContent.id\n                $ctDcrCreated = $true\n                \n                Write-Host \"  ✓ Change Tracking DCR created successfully\" -ForegroundColor Green\n                Write-Host \"  DCR ID: $changeTrackingDCRId\" -ForegroundColor Gray\n            }\n            else {\n                Write-Host \"  ✗ Failed to create DCR. Status Code: $($response.StatusCode)\" -ForegroundColor Red\n                Write-Host \"  Error: $($response.Content)\" -ForegroundColor Red\n                throw \"Failed to create Change Tracking DCR via REST API\"\n            }\n        }\n        \n        # Now associate the DCR to all VMs that have Change Tracking installed\n        Write-Host \"\"\n        Write-Host \"Associating Change Tracking DCR to VMs...\" -ForegroundColor Cyan\n        \n        foreach ($result in $results) {\n            if ($result.CTInstalled -eq $true) {\n                $vmId = ($vmArray | Where-Object { $_ -like \"*/$($result.VMName)\" })[0]\n                $ctAssociationName = \"dcr-ct-association-$($result.VMName)\"\n                \n                try {\n                    $existingCTAssociation = Get-AzDataCollectionRuleAssociation `\n                        -TargetResourceId $vmId `\n                        -AssociationName $ctAssociationName `\n                        -ErrorAction SilentlyContinue\n                    \n                    if ($existingCTAssociation) {\n                        Write-Host \"  ✓ $($result.VMName): Change Tracking DCR already associated\" -ForegroundColor Green\n                        $result.CTDCRAssociated = $true\n                    }\n                    else {\n                        $ctAssociation = New-AzDataCollectionRuleAssociation `\n                            -TargetResourceId $vmId `\n                            -AssociationName $ctAssociationName `\n                            -DataCollectionRuleId $changeTrackingDCRId `\n                            -ErrorAction Stop\n                        \n                        Write-Host \"  ✓ $($result.VMName): Change Tracking DCR associated\" -ForegroundColor Green\n                        $result.CTDCRAssociated = $true\n                    }\n                }\n                catch {\n                    Write-Host \"  ✗ $($result.VMName): Failed to associate CT DCR: $($_.Exception.Message)\" -ForegroundColor Red\n                    $result.CTDCRAssociated = $false\n                }\n            }\n        }\n    }\n    catch {\n        Write-Host \"✗ Failed to create Change Tracking DCR: $($_.Exception.Message)\" -ForegroundColor Red\n        Write-Host \"  You may need to create it manually after tables are populated\" -ForegroundColor Yellow\n    }\n    \n    Write-Host \"\"\n}\n\nWrite-Host \"========================================\"\nWrite-Host \"SUMMARY\"\nWrite-Host \"========================================\"\nWrite-Host \"Total Azure VMs: $($vmArray.Count)\"\nWrite-Host \"✓ Fully Configured: $successCount\" -ForegroundColor Green\nif ($partialCount -gt 0) {\n    Write-Host \"⚠ Partially Configured: $partialCount\" -ForegroundColor Yellow\n}\nif ($failCount -gt 0) {\n    Write-Host \"✗ Failed: $failCount\" -ForegroundColor Red\n}\nWrite-Host \"========================================\"\nWrite-Host \"\"\n\nif ($successCount -gt 0 -or $partialCount -gt 0) {\n    Write-Host \"Monitoring is active on $(($successCount + $partialCount)) Azure VM(s)\" -ForegroundColor Green\n    if ($partialCount -gt 0) {\n        Write-Host \"Start stopped VMs to complete installation\" -ForegroundColor Cyan\n    }\n}\n\nif ($EnableChangeTracking -and $ctDcrCreated) {\n    Write-Host \"Change Tracking DCR created and associated\" -ForegroundColor Green\n}\n\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['results'] = $results | ConvertTo-Json -Compress\n$DeploymentScriptOutputs['successCount'] = $successCount\n$DeploymentScriptOutputs['partialCount'] = $partialCount\n$DeploymentScriptOutputs['failCount'] = $failCount\n$DeploymentScriptOutputs['totalVMs'] = $vmArray.Count\n$DeploymentScriptOutputs['changeTrackingDCRId'] = $changeTrackingDCRId\n$DeploymentScriptOutputs['status'] = 'Completed'\n"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
      ]
    },
    {
      "condition": "[parameters('monitorExistingArcServers')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('setup-arc-servers-{0}', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], json('{}'))]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', variables('managedIdentityId'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT60M",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format('-ArcServerIdsBase64 \"{0}\" -MonitorAllArcServers ${1} -DCRId \"{2}\" -EnableChangeTracking ${3} -ChangeTrackingDCRName \"{4}\" -WorkspaceId \"{5}\" -ResourceGroupName \"{6}\" -Location \"{7}\"', base64(string(parameters('selectedArcServerIds'))), parameters('monitorAllArcServers'), resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName')), if(parameters('enableChangeTracking'), parameters('enableChangeTrackingArc'), false()), variables('changeTrackingDcrName'), variables('workspaceId'), resourceGroup().name, parameters('location'))]",
        "scriptContent": "param(\n    [string]$ArcServerIdsBase64,\n    [bool]$MonitorAllArcServers,\n    [string]$DCRId,\n    [bool]$EnableChangeTracking,\n    [string]$ChangeTrackingDCRName,\n    [string]$WorkspaceId,\n    [string]$ResourceGroupName,\n    [string]$Location\n)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"Arc Server Monitoring Setup\"\nWrite-Host \"========================================\"\nWrite-Host \"Monitor All Arc Servers: $MonitorAllArcServers\"\nWrite-Host \"DCR ID: $DCRId\"\nWrite-Host \"Enable Change Tracking: $EnableChangeTracking\"\nWrite-Host \"Change Tracking DCR Name: $ChangeTrackingDCRName\"\nWrite-Host \"Workspace ID: $WorkspaceId\"\nWrite-Host \"\"\n\n# Install Az.ConnectedMachine module\nWrite-Host \"Installing Az.ConnectedMachine module...\" -ForegroundColor Cyan\ntry {\n    if (-not (Get-Module -ListAvailable -Name Az.ConnectedMachine)) {\n        Install-Module -Name Az.ConnectedMachine -Force -AllowClobber -Scope CurrentUser -ErrorAction Stop\n        Write-Host \"✓ Az.ConnectedMachine module installed successfully\" -ForegroundColor Green\n    } else {\n        Write-Host \"✓ Az.ConnectedMachine module already installed\" -ForegroundColor Green\n    }\n    Import-Module Az.ConnectedMachine -ErrorAction Stop\n    Write-Host \"✓ Az.ConnectedMachine module imported\" -ForegroundColor Green\n}\ncatch {\n    Write-Host \"ERROR: Failed to install/import Az.ConnectedMachine module: $_\" -ForegroundColor Red\n    Write-Host \"This module is required to manage Arc-enabled servers\" -ForegroundColor Red\n    exit 1\n}\nWrite-Host \"\"\n\n# Wait for role propagation\nWrite-Host \"Waiting 60 seconds for role assignment propagation...\"\nStart-Sleep -Seconds 60\n\n$arcArray = @()\n\nif ($MonitorAllArcServers) {\n    Write-Host \"Discovering all Arc-enabled servers in subscription...\"\n    try {\n        $allArcServers = Get-AzConnectedMachine -ErrorAction Stop\n        Write-Host \"Found $($allArcServers.Count) Arc-enabled servers\"\n        \n        foreach ($arc in $allArcServers) {\n            $arcArray += $arc.Id\n            Write-Host \"  - $($arc.Name)\"\n        }\n    }\n    catch {\n        Write-Host \"ERROR: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\nelse {\n    Write-Host \"Decoding Arc Server IDs from Base64...\"\n    \n    try {\n        $ArcIdsJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($ArcServerIdsBase64))\n        Write-Host \"Decoded JSON: $ArcIdsJson\"\n        \n        if([string]::IsNullOrWhiteSpace($ArcIdsJson) -or $ArcIdsJson -eq '[]') {\n            Write-Host \"ERROR: No Arc servers provided!\" -ForegroundColor Red\n            exit 1\n        }\n        \n        $arcArray = $ArcIdsJson | ConvertFrom-Json\n        Write-Host \"Parsed $($arcArray.Count) Arc server(s)\"\n    }\n    catch {\n        Write-Host \"ERROR: Failed to decode/parse: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\n\nif ($arcArray.Count -eq 0) {\n    Write-Host \"No Arc servers to process\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'NoArcServers'\n    exit 0\n}\n\nWrite-Host \"\"\nWrite-Host \"Processing $($arcArray.Count) Arc server(s)...\"\nWrite-Host \"\"\n\n$results = @()\n$successCount = 0\n$partialCount = 0\n$failCount = 0\n$changeTrackingDCRId = \"\"\n$ctDcrCreated = $false\n\nforeach ($arcId in $arcArray) {\n    Write-Host \"========================================\"\n    Write-Host \"Processing: $arcId\" -ForegroundColor Cyan\n    Write-Host \"========================================\"\n    \n    $arcName = $arcId.Split('/')[-1]\n    $arcRG = $arcId.Split('/')[4]\n    \n    Write-Host \"Arc Server Name: $arcName\"\n    Write-Host \"Resource Group: $arcRG\"\n    \n    $amaInstalled = $false\n    $dcrAssociated = $false\n    $ctInstalled = $false\n    $ctDcrAssociated = $false\n    $arcStatus = \"Unknown\"\n    $errorMessage = \"\"\n    \n    try {\n        # Get Arc machine details\n        $arc = Get-AzConnectedMachine -ResourceGroupName $arcRG -Name $arcName -ErrorAction Stop\n        $osType = $arc.OSName\n        $location = $arc.Location\n        $arcStatus = $arc.Status\n        \n        Write-Host \"OS Type: $osType\"\n        Write-Host \"Location: $location\"\n        Write-Host \"Status: $arcStatus\" -ForegroundColor $(if($arcStatus -eq 'Connected') { 'Green' } else { 'Yellow' })\n        Write-Host \"\"\n        \n        # Determine extension details\n        if ($osType -like \"*Linux*\") {\n            $extensionName = \"AzureMonitorLinuxAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorLinuxAgent\"\n            $ctExtensionName = \"ChangeTracking-Linux\"\n            $ctExtensionPublisher = \"Microsoft.Azure.ChangeTrackingAndInventory\"\n            $ctExtensionType = \"ChangeTracking-Linux\"\n        }\n        else {\n            $extensionName = \"AzureMonitorWindowsAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorWindowsAgent\"\n            $ctExtensionName = \"ChangeTracking-Windows\"\n            $ctExtensionPublisher = \"Microsoft.Azure.ChangeTrackingAndInventory\"\n            $ctExtensionType = \"ChangeTracking-Windows\"\n        }\n        \n        # Step 1: Check and install AMA\n        Write-Host \"[1/4] Azure Monitor Agent...\" -ForegroundColor Yellow\n        \n        if ($arcStatus -eq 'Connected') {\n            $existingExtension = Get-AzConnectedMachineExtension `\n                -ResourceGroupName $arcRG `\n                -MachineName $arcName `\n                -Name $extensionName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingExtension) {\n                Write-Host \"  ✓ AMA already installed\" -ForegroundColor Green\n                $amaInstalled = $true\n            }\n            else {\n                Write-Host \"  Installing Azure Monitor Agent...\" -ForegroundColor Cyan\n                \n                try {\n                    $extensionResult = New-AzConnectedMachineExtension `\n                        -ResourceGroupName $arcRG `\n                        -MachineName $arcName `\n                        -Name $extensionName `\n                        -Publisher $extensionPublisher `\n                        -ExtensionType $extensionType `\n                        -Location $location `\n                        -EnableAutomaticUpgrade `\n                        -ErrorAction Stop\n                    \n                    Write-Host \"  ✓ AMA installed successfully\" -ForegroundColor Green\n                    $amaInstalled = $true\n                }\n                catch {\n                    Write-Host \"  ✗ Failed to install AMA: $($_.Exception.Message)\" -ForegroundColor Red\n                    $errorMessage = \"AMA: $($_.Exception.Message)\"\n                    $amaInstalled = $false\n                }\n            }\n        }\n        else {\n            Write-Host \"  ⚠ Arc server is not connected\" -ForegroundColor Yellow\n            $amaInstalled = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Step 2: Associate DCR\n        Write-Host \"[2/4] Data Collection Rule Association...\" -ForegroundColor Yellow\n        \n        $associationName = \"dcr-association-$arcName\"\n        \n        try {\n            $existingAssociation = Get-AzDataCollectionRuleAssociation `\n                -TargetResourceId $arcId `\n                -AssociationName $associationName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingAssociation) {\n                Write-Host \"  ✓ DCR association already exists\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n            else {\n                $association = New-AzDataCollectionRuleAssociation `\n                    -TargetResourceId $arcId `\n                    -AssociationName $associationName `\n                    -DataCollectionRuleId $DCRId `\n                    -ErrorAction Stop\n                \n                Write-Host \"  ✓ DCR associated successfully\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n        }\n        catch {\n            Write-Host \"  ✗ Failed to associate DCR: $($_.Exception.Message)\" -ForegroundColor Red\n            if ($errorMessage) {\n                $errorMessage += \"; DCR: $($_.Exception.Message)\"\n            } else {\n                $errorMessage = \"DCR: $($_.Exception.Message)\"\n            }\n            $dcrAssociated = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Step 3: Install Change Tracking Extension (if enabled)\n        if ($EnableChangeTracking) {\n            Write-Host \"[3/4] Change Tracking Extension...\" -ForegroundColor Yellow\n            \n            if ($arcStatus -eq 'Connected') {\n                $existingCTExtension = Get-AzConnectedMachineExtension `\n                    -ResourceGroupName $arcRG `\n                    -MachineName $arcName `\n                    -Name $ctExtensionName `\n                    -ErrorAction SilentlyContinue\n                \n                if ($existingCTExtension) {\n                    Write-Host \"  ✓ Change Tracking extension already installed\" -ForegroundColor Green\n                    $ctInstalled = $true\n                }\n                else {\n                    Write-Host \"  Installing Change Tracking extension...\" -ForegroundColor Cyan\n                    \n                    try {\n                        $ctExtensionResult = New-AzConnectedMachineExtension `\n                            -ResourceGroupName $arcRG `\n                            -MachineName $arcName `\n                            -Name $ctExtensionName `\n                            -Publisher $ctExtensionPublisher `\n                            -ExtensionType $ctExtensionType `\n                            -Location $location `\n                            -EnableAutomaticUpgrade `\n                            -ErrorAction Stop\n                        \n                        Write-Host \"  ✓ Change Tracking extension installed successfully\" -ForegroundColor Green\n                        $ctInstalled = $true\n                        \n                        # Wait for tables to be created\n                        if (-not $ctDcrCreated) {\n                            Write-Host \"  ⏳ Waiting for Change Tracking tables to be created...\" -ForegroundColor Cyan\n                            Start-Sleep -Seconds 120\n                        }\n                    }\n                    catch {\n                        Write-Host \"  ✗ Failed to install Change Tracking extension: $($_.Exception.Message)\" -ForegroundColor Red\n                        if ($errorMessage) {\n                            $errorMessage += \"; CT: $($_.Exception.Message)\"\n                        } else {\n                            $errorMessage = \"CT: $($_.Exception.Message)\"\n                        }\n                        $ctInstalled = $false\n                    }\n                }\n            }\n            else {\n                Write-Host \"  ⚠ Arc server is not connected - Change Tracking will be installed when reconnected\" -ForegroundColor Yellow\n                $ctInstalled = $false\n            }\n            \n            Write-Host \"\"\n        }\n        \n        # Determine overall status\n        $allGood = $dcrAssociated -and ($amaInstalled -or $arcStatus -ne 'Connected')\n        if($EnableChangeTracking) {\n            $allGood = $allGood -and ($ctInstalled -or $arcStatus -ne 'Connected')\n        }\n        \n        if ($allGood) {\n            Write-Host \"✓ Arc server configured successfully!\" -ForegroundColor Green\n            if ($arcStatus -ne 'Connected') {\n                Write-Host \"  Note: Reconnect Arc server to complete extension installation\" -ForegroundColor Cyan\n            }\n            $successCount++\n            $status = \"Success\"\n        }\n        elseif ($dcrAssociated) {\n            Write-Host \"⚠ Partially configured\" -ForegroundColor Yellow\n            $partialCount++\n            $status = \"Partial\"\n        }\n        else {\n            Write-Host \"✗ Configuration failed\" -ForegroundColor Red\n            $failCount++\n            $status = \"Failed\"\n        }\n        \n        Write-Host \"\"\n        \n        $results += @{\n            ArcServerName = $arcName\n            Status = $status\n            OSType = $osType\n            ArcStatus = $arcStatus\n            AMAInstalled = $amaInstalled\n            DCRAssociated = $dcrAssociated\n            CTInstalled = $ctInstalled\n            Error = $errorMessage\n        }\n    }\n    catch {\n        Write-Host \"\"\n        Write-Host \"✗ FAILED: $($_.Exception.Message)\" -ForegroundColor Red\n        Write-Host \"\"\n        \n        $failCount++\n        \n        $results += @{\n            ArcServerName = $arcName\n            Status = \"Failed\"\n            Error = $_.Exception.Message\n        }\n    }\n}\n\n# CREATE CHANGE TRACKING DCR (after at least one extension is installed)\nif ($EnableChangeTracking -and $successCount -gt 0) {\n    Write-Host \"========================================\"\n    Write-Host \"Creating Change Tracking DCR\"\n    Write-Host \"========================================\"\n    \n    try {\n        # Check if DCR already exists\n        $existingDCR = Get-AzDataCollectionRule -ResourceGroupName $ResourceGroupName -Name $ChangeTrackingDCRName -ErrorAction SilentlyContinue\n        \n        if ($existingDCR) {\n            Write-Host \"✓ Change Tracking DCR already exists\" -ForegroundColor Green\n            $changeTrackingDCRId = $existingDCR.Id\n            $ctDcrCreated = $true\n        }\n        else {\n            Write-Host \"Creating new Change Tracking DCR...\" -ForegroundColor Cyan\n            \n            # Build DCR JSON using REST API\n            $dcrBody = @{\n                location = $Location\n                properties = @{\n                    dataSources = @{\n                        extensions = @(\n                            @{\n                                name = \"CTDataSource-Windows\"\n                                streams = @(\n                                    \"Microsoft-ConfigurationChange\"\n                                    \"Microsoft-ConfigurationChangeV2\"\n                                    \"Microsoft-ConfigurationData\"\n                                )\n                                extensionName = \"ChangeTracking-Windows\"\n                                extensionSettings = @{\n                                    enableFiles = $true\n                                    enableSoftware = $true\n                                    enableRegistry = $true\n                                    enableServices = $true\n                                    enableInventory = $true\n                                    registrySettings = @{\n                                        registryCollectionFrequency = 3000\n                                        registryInfo = @(\n                                            @{\n                                                name = \"Registry_1\"\n                                                groupTag = \"Recommended\"\n                                                enabled = $false\n                                                recurse = $true\n                                                description = \"\"\n                                                keyName = \"HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Group Policy\\\\Scripts\\\\Startup\"\n                                                valueName = \"\"\n                                            }\n                                            @{\n                                                name = \"Registry_2\"\n                                                groupTag = \"Recommended\"\n                                                enabled = $false\n                                                recurse = $true\n                                                description = \"\"\n                                                keyName = \"HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Group Policy\\\\Scripts\\\\Shutdown\"\n                                                valueName = \"\"\n                                            }\n                                        )\n                                    }\n                                    fileSettings = @{\n                                        fileCollectionFrequency = 2700\n                                    }\n                                    softwareSettings = @{\n                                        softwareCollectionFrequency = 1800\n                                    }\n                                    inventorySettings = @{\n                                        inventoryCollectionFrequency = 36000\n                                    }\n                                    serviceSettings = @{\n                                        serviceCollectionFrequency = 1800\n                                    }\n                                }\n                            }\n                            @{\n                                name = \"CTDataSource-Linux\"\n                                streams = @(\n                                    \"Microsoft-ConfigurationChange\"\n                                    \"Microsoft-ConfigurationChangeV2\"\n                                    \"Microsoft-ConfigurationData\"\n                                )\n                                extensionName = \"ChangeTracking-Linux\"\n                                extensionSettings = @{\n                                    enableFiles = $true\n                                    enableSoftware = $true\n                                    enableRegistry = $false\n                                    enableServices = $true\n                                    enableInventory = $true\n                                    fileSettings = @{\n                                        fileCollectionFrequency = 900\n                                        fileInfo = @(\n                                            @{\n                                                name = \"ChangeTrackingLinuxPath_default\"\n                                                enabled = $true\n                                                destinationPath = \"/etc/*.conf\"\n                                                useSudo = $true\n                                                recurse = $true\n                                                maxContentsReturnable = 5000000\n                                                pathType = \"File\"\n                                                type = \"File\"\n                                                links = \"Follow\"\n                                                maxOutputSize = 500000\n                                                groupTag = \"Recommended\"\n                                            }\n                                        )\n                                    }\n                                    softwareSettings = @{\n                                        softwareCollectionFrequency = 300\n                                    }\n                                    inventorySettings = @{\n                                        inventoryCollectionFrequency = 36000\n                                    }\n                                    serviceSettings = @{\n                                        serviceCollectionFrequency = 300\n                                    }\n                                }\n                            }\n                        )\n                    }\n                    destinations = @{\n                        logAnalytics = @(\n                            @{\n                                name = \"Microsoft-CT-Dest\"\n                                workspaceResourceId = $WorkspaceId\n                            }\n                        )\n                    }\n                    dataFlows = @(\n                        @{\n                            streams = @(\n                                \"Microsoft-ConfigurationChange\"\n                                \"Microsoft-ConfigurationChangeV2\"\n                                \"Microsoft-ConfigurationData\"\n                            )\n                            destinations = @(\"Microsoft-CT-Dest\")\n                        }\n                    )\n                    description = \"Data Collection Rule for Change Tracking and Inventory\"\n                }\n            } | ConvertTo-Json -Depth 20\n            \n            # Get subscription ID from WorkspaceId\n            $subscriptionId = $WorkspaceId.Split('/')[2]\n            \n            # Create DCR using REST API\n            $dcrUri = \"https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.Insights/dataCollectionRules/$ChangeTrackingDCRName`?api-version=2022-06-01\"\n            \n            Write-Host \"  DCR URI: $dcrUri\" -ForegroundColor Gray\n            Write-Host \"  Creating DCR via REST API...\" -ForegroundColor Cyan\n            \n            $response = Invoke-AzRestMethod -Uri $dcrUri -Method PUT -Payload $dcrBody\n            \n            if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 201) {\n                $responseContent = $response.Content | ConvertFrom-Json\n                $changeTrackingDCRId = $responseContent.id\n                $ctDcrCreated = $true\n                \n                Write-Host \"  ✓ Change Tracking DCR created successfully\" -ForegroundColor Green\n                Write-Host \"  DCR ID: $changeTrackingDCRId\" -ForegroundColor Gray\n            }\n            else {\n                Write-Host \"  ✗ Failed to create DCR. Status Code: $($response.StatusCode)\" -ForegroundColor Red\n                Write-Host \"  Error: $($response.Content)\" -ForegroundColor Red\n                throw \"Failed to create Change Tracking DCR via REST API\"\n            }\n        }\n        \n        # Now associate the DCR to all Arc servers that have Change Tracking installed\n        Write-Host \"\"\n        Write-Host \"Associating Change Tracking DCR to Arc servers...\" -ForegroundColor Cyan\n        \n        foreach ($result in $results) {\n            if ($result.CTInstalled -eq $true) {\n                $arcId = ($arcArray | Where-Object { $_ -like \"*/$($result.ArcServerName)\" })[0]\n                $ctAssociationName = \"dcr-ct-association-$($result.ArcServerName)\"\n                \n                try {\n                    $existingCTAssociation = Get-AzDataCollectionRuleAssociation `\n                        -TargetResourceId $arcId `\n                        -AssociationName $ctAssociationName `\n                        -ErrorAction SilentlyContinue\n                    \n                    if ($existingCTAssociation) {\n                        Write-Host \"  ✓ $($result.ArcServerName): Change Tracking DCR already associated\" -ForegroundColor Green\n                        $result.CTDCRAssociated = $true\n                    }\n                    else {\n                        $ctAssociation = New-AzDataCollectionRuleAssociation `\n                            -TargetResourceId $arcId `\n                            -AssociationName $ctAssociationName `\n                            -DataCollectionRuleId $changeTrackingDCRId `\n                            -ErrorAction Stop\n                        \n                        Write-Host \"  ✓ $($result.ArcServerName): Change Tracking DCR associated\" -ForegroundColor Green\n                        $result.CTDCRAssociated = $true\n                    }\n                }\n                catch {\n                    Write-Host \"  ✗ $($result.ArcServerName): Failed to associate CT DCR: $($_.Exception.Message)\" -ForegroundColor Red\n                    $result.CTDCRAssociated = $false\n                }\n            }\n        }\n    }\n    catch {\n        Write-Host \"✗ Failed to create Change Tracking DCR: $($_.Exception.Message)\" -ForegroundColor Red\n        Write-Host \"  You may need to create it manually after tables are populated\" -ForegroundColor Yellow\n    }\n    \n    Write-Host \"\"\n}\n\nWrite-Host \"========================================\"\nWrite-Host \"SUMMARY\"\nWrite-Host \"========================================\"\nWrite-Host \"Total Arc Servers: $($arcArray.Count)\"\nWrite-Host \"✓ Fully Configured: $successCount\" -ForegroundColor Green\nif ($partialCount -gt 0) {\n    Write-Host \"⚠ Partially Configured: $partialCount\" -ForegroundColor Yellow\n}\nif ($failCount -gt 0) {\n    Write-Host \"✗ Failed: $failCount\" -ForegroundColor Red\n}\nWrite-Host \"========================================\"\nWrite-Host \"\"\n\nif ($successCount -gt 0 -or $partialCount -gt 0) {\n    Write-Host \"Monitoring is active on $(($successCount + $partialCount)) Arc server(s)\" -ForegroundColor Green\n    if ($partialCount -gt 0) {\n        Write-Host \"Reconnect Arc servers to complete installation\" -ForegroundColor Cyan\n    }\n}\n\nif ($EnableChangeTracking -and $ctDcrCreated) {\n    Write-Host \"Change Tracking DCR created and associated\" -ForegroundColor Green\n}\n\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['results'] = $results | ConvertTo-Json -Compress\n$DeploymentScriptOutputs['successCount'] = $successCount\n$DeploymentScriptOutputs['partialCount'] = $partialCount\n$DeploymentScriptOutputs['failCount'] = $failCount\n$DeploymentScriptOutputs['totalArcServers'] = $arcArray.Count\n$DeploymentScriptOutputs['changeTrackingDCRId'] = $changeTrackingDCRId\n$DeploymentScriptOutputs['status'] = 'Completed'\n"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
      ]
    },
    {
      "condition": "[parameters('enableAzureVMPolicy')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('policyAssignment-azure-vms-{0}', parameters('deploymentName'))]",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "policyAssignmentName": {
            "value": "[parameters('azureVMPolicyAssignmentName')]"
          },
          "dcrResourceId": {
            "value": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]"
          },
          "managedIdentityResourceId": {
            "value": "[variables('managedIdentityId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentName": {
            "value": "[parameters('deploymentName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "policyAssignmentName": {
              "type": "string"
            },
            "dcrResourceId": {
              "type": "string"
            },
            "managedIdentityResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "deploymentName": {
              "type": "string"
            }
          },
          "variables": {
            "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/924bfe3a-762f-40e7-86dd-5c8b95eb09e6"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2023-04-01",
              "name": "[parameters('policyAssignmentName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[parameters('managedIdentityResourceId')]": {}
                }
              },
              "properties": {
                "displayName": "[format('Enable Azure Monitor for Azure VMs - {0}', parameters('policyAssignmentName'))]",
                "description": "Automatically configures Windows and Linux Azure VMs with Azure Monitor Agent using user-assigned managed identity and associates with unified Data Collection Rule",
                "enforcementMode": "Default",
                "policyDefinitionId": "[variables('policyDefinitionId')]",
                "parameters": {
                  "bringYourOwnUserAssignedManagedIdentity": {
                    "value": true
                  },
                  "scopeToSupportedImages": {
                    "value": false
                  },
                  "dcrResourceId": {
                    "value": "[parameters('dcrResourceId')]"
                  },
                  "restrictBringYourOwnUserAssignedIdentityToSubscription": {
                    "value": false
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('managedIdentityResourceId')]"
                  },
                  "userAssignedManagedIdentityResourceGroup": {
                    "value": "[split(parameters('managedIdentityResourceId'), '/')[4]]"
                  },
                  "userAssignedManagedIdentityName": {
                    "value": "[split(parameters('managedIdentityResourceId'), '/')[8]]"
                  }
                },
                "nonComplianceMessages": [
                  {
                    "message": "Azure VMs must have Azure Monitor Agent installed with user-assigned managed identity and configured with the unified Data Collection Rule"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "policyAssignmentId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
      ]
    },
    {
      "condition": "[parameters('enableAzureVMPolicy')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('remediation-azure-vms-{0}', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', variables('managedIdentityId'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format('-PolicyAssignmentId \"{0}\"', if(parameters('enableAzureVMPolicy'), reference(format('policyAssignment-azure-vms-{0}', parameters('deploymentName'))).outputs.policyAssignmentId.value, ''))]",
        "scriptContent": "param([string]$PolicyAssignmentId)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"POLICY REMEDIATION - Azure VMs\"\nWrite-Host \"========================================\"\nWrite-Host \"Policy Assignment ID: $PolicyAssignmentId\"\nWrite-Host \"\"\n\nif ([string]::IsNullOrWhiteSpace($PolicyAssignmentId)) {\n    Write-Host \"No policy assignment ID provided\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'Skipped'\n    exit 0\n}\n\n# Wait for policy to propagate\nWrite-Host \"Waiting 90 seconds for policy propagation...\"\nStart-Sleep -Seconds 90\n\n$remediations = @()\n$successCount = 0\n$failCount = 0\n\ntry {\n    # Get policy assignment details\n    $policyAssignment = Get-AzPolicyAssignment -Id $PolicyAssignmentId -ErrorAction Stop\n    \n    Write-Host \"Policy Assignment: $($policyAssignment.Name)\"\n    Write-Host \"Scope: $($policyAssignment.Properties.Scope)\"\n    Write-Host \"\"\n    \n    # Define all policy definition reference IDs to remediate\n    $policiesToRemediate = @(\n        @{ Name = \"Managed Identity Assignment\"; ReferenceId = \"AddUserAssignedManagedIdentity_VM\" },\n        @{ Name = \"Windows AMA Installation\"; ReferenceId = \"DeployAzureMonitoringAgentWindows\" },\n        @{ Name = \"Windows DCR Association\"; ReferenceId = \"DataCollectionRuleAssociation_Windows\" },\n        @{ Name = \"Linux AMA Installation\"; ReferenceId = \"DeployAzureMonitoringAgentLinux\" },\n        @{ Name = \"Linux DCR Association\"; ReferenceId = \"DataCollectionRuleAssociation_Linux\" }\n    )\n    \n    $policyNumber = 1\n    $totalPolicies = $policiesToRemediate.Count\n    \n    foreach($policy in $policiesToRemediate) {\n        Write-Host \"[$policyNumber/$totalPolicies] Creating remediation for: $($policy.Name)\" -ForegroundColor Cyan\n        \n        try {\n            $remediationName = \"remediate-$($policy.ReferenceId.ToLower())-$(Get-Date -Format 'yyyyMMddHHmmss')\"\n            \n            $remediation = Start-AzPolicyRemediation `\n                -Name $remediationName `\n                -PolicyAssignmentId $PolicyAssignmentId `\n                -PolicyDefinitionReferenceId $policy.ReferenceId `\n                -ResourceDiscoveryMode ReEvaluateCompliance `\n                -ErrorAction Stop\n            \n            Write-Host \"  ✓ SUCCESS: $($remediation.Id)\" -ForegroundColor Green\n            $successCount++\n            \n            $remediations += @{ \n                Name = $policy.Name\n                ReferenceId = $policy.ReferenceId\n                RemediationId = $remediation.Id\n                Status = \"Created\" \n            }\n        }\n        catch {\n            Write-Host \"  ✗ FAILED: $($_.Exception.Message)\" -ForegroundColor Red\n            $failCount++\n            \n            $remediations += @{ \n                Name = $policy.Name\n                ReferenceId = $policy.ReferenceId\n                Error = $_.Exception.Message\n                Status = \"Failed\" \n            }\n        }\n        \n        Write-Host \"\"\n        $policyNumber++\n    }\n    \n    Write-Host \"========================================\"\n    Write-Host \"REMEDIATION SUMMARY\"\n    Write-Host \"========================================\"\n    Write-Host \"Total Policies: $totalPolicies\"\n    Write-Host \"✓ Successful: $successCount\" -ForegroundColor Green\n    if ($failCount -gt 0) {\n        Write-Host \"✗ Failed: $failCount\" -ForegroundColor Red\n    }\n    Write-Host \"========================================\"\n    Write-Host \"\"\n    \n    if ($successCount -gt 0) {\n        Write-Host \"Remediation tasks are running in the background\" -ForegroundColor Cyan\n        Write-Host \"Check Azure Portal > Policy > Compliance for progress\" -ForegroundColor Cyan\n        Write-Host \"Azure VMs will be configured automatically within 15-30 minutes\" -ForegroundColor Cyan\n    }\n    \n    if ($failCount -gt 0) {\n        Write-Host \"\"\n        Write-Host \"Some remediation tasks failed. You can create them manually:\" -ForegroundColor Yellow\n        Write-Host \"  1. Go to Azure Portal > Policy > Compliance\"\n        Write-Host \"  2. Select the policy assignment\"\n        Write-Host \"  3. Click 'Create remediation task' for failed policies\"\n    }\n    \n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['remediations'] = $remediations | ConvertTo-Json -Compress\n    $DeploymentScriptOutputs['totalPolicies'] = $totalPolicies\n    $DeploymentScriptOutputs['successCount'] = $successCount\n    $DeploymentScriptOutputs['failCount'] = $failCount\n    $DeploymentScriptOutputs['status'] = 'Completed'\n}\ncatch {\n    Write-Host \"========================================\"\n    Write-Host \"ERROR\"\n    Write-Host \"========================================\"\n    Write-Host $_.Exception.Message -ForegroundColor Red\n    Write-Host \"\"\n    Write-Host \"You can create remediation tasks manually from Azure Portal\" -ForegroundColor Yellow\n    \n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'Failed'\n    $DeploymentScriptOutputs['error'] = $_.Exception.Message\n}\n"
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('policyAssignment-azure-vms-{0}', parameters('deploymentName')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[parameters('enableArcPolicy')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('policyAssignment-arc-servers-{0}', parameters('deploymentName'))]",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "policyAssignmentName": {
            "value": "[parameters('arcPolicyAssignmentName')]"
          },
          "dcrResourceId": {
            "value": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]"
          },
          "managedIdentityResourceId": {
            "value": "[variables('managedIdentityId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentName": {
            "value": "[parameters('deploymentName')]"
          },
          "enableProcessesAndDependencies": {
            "value": "[parameters('enableProcessesAndDependencies')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "policyAssignmentName": {
              "type": "string"
            },
            "dcrResourceId": {
              "type": "string"
            },
            "managedIdentityResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "deploymentName": {
              "type": "string"
            },
            "enableProcessesAndDependencies": {
              "type": "bool"
            }
          },
          "variables": {
            "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/2b00397d-c309-49c4-aa5a-f0b2c5bc6321"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2023-04-01",
              "name": "[parameters('policyAssignmentName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[parameters('managedIdentityResourceId')]": {}
                }
              },
              "properties": {
                "displayName": "[format('Enable Azure Monitor for Hybrid VMs with AMA - {0}', parameters('policyAssignmentName'))]",
                "description": "Automatically configures Windows and Linux Arc-enabled servers with Azure Monitor Agent using user-assigned managed identity and associates with unified Data Collection Rule",
                "enforcementMode": "Default",
                "policyDefinitionId": "[variables('policyDefinitionId')]",
                "parameters": {
                  "enableProcessesAndDependencies": {
                    "value": "[parameters('enableProcessesAndDependencies')]"
                  },
                  "effect": {
                    "value": "DeployIfNotExists"
                  },
                  "dcrResourceId": {
                    "value": "[parameters('dcrResourceId')]"
                  }
                },
                "nonComplianceMessages": [
                  {
                    "message": "Arc-enabled servers must have Azure Monitor Agent installed and configured with the unified Data Collection Rule"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "policyAssignmentId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
      ]
    },
    {
      "condition": "[parameters('enableArcPolicy')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('remediation-arc-servers-{0}', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', variables('managedIdentityId'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format('-PolicyAssignmentId \"{0}\"', if(parameters('enableArcPolicy'), reference(format('policyAssignment-arc-servers-{0}', parameters('deploymentName'))).outputs.policyAssignmentId.value, ''))]",
        "scriptContent": "param([string]$PolicyAssignmentId)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"POLICY REMEDIATION - Arc Servers\"\nWrite-Host \"========================================\"\nWrite-Host \"Policy Assignment ID: $PolicyAssignmentId\"\nWrite-Host \"\"\n\nif ([string]::IsNullOrWhiteSpace($PolicyAssignmentId)) {\n    Write-Host \"No policy assignment ID provided\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'Skipped'\n    exit 0\n}\n\n# Wait for policy to propagate\nWrite-Host \"Waiting 90 seconds for policy propagation...\"\nStart-Sleep -Seconds 90\n\n$remediations = @()\n$successCount = 0\n$failCount = 0\n\ntry {\n    # Get policy assignment details\n    $policyAssignment = Get-AzPolicyAssignment -Id $PolicyAssignmentId -ErrorAction Stop\n    \n    Write-Host \"Policy Assignment: $($policyAssignment.Name)\"\n    Write-Host \"Scope: $($policyAssignment.Properties.Scope)\"\n    Write-Host \"\"\n    \n    # Get all policy definitions in the initiative\n    Write-Host \"Retrieving policy definitions...\" -ForegroundColor Cyan\n    $policySet = Get-AzPolicySetDefinition -Id $policyAssignment.Properties.PolicyDefinitionId -ErrorAction Stop\n    \n    $totalPolicies = $policySet.Properties.PolicyDefinitions.Count\n    Write-Host \"Found $totalPolicies policies in the initiative\"\n    Write-Host \"\"\n    \n    $policyNumber = 1\n    \n    foreach ($policyDef in $policySet.Properties.PolicyDefinitions) {\n        $policyRefId = $policyDef.policyDefinitionReferenceId\n        $policyName = if ($policyDef.policyDefinitionId -match '/([^/]+)$') { $matches[1] } else { $policyRefId }\n        \n        Write-Host \"[$policyNumber/$totalPolicies] Creating remediation for: $policyName\" -ForegroundColor Cyan\n        \n        try {\n            $remediationName = \"remediate-arc-$($policyRefId.ToLower() -replace '[^a-z0-9-]', '-')-$(Get-Date -Format 'yyyyMMddHHmmss')\"\n            \n            $remediation = Start-AzPolicyRemediation `\n                -Name $remediationName `\n                -PolicyAssignmentId $PolicyAssignmentId `\n                -PolicyDefinitionReferenceId $policyRefId `\n                -ResourceDiscoveryMode ReEvaluateCompliance `\n                -ErrorAction Stop\n            \n            Write-Host \"  ✓ SUCCESS: $($remediation.Id)\" -ForegroundColor Green\n            $successCount++\n            \n            $remediations += @{ \n                Name = $policyName\n                ReferenceId = $policyRefId\n                RemediationId = $remediation.Id\n                Status = \"Created\" \n            }\n        }\n        catch {\n            Write-Host \"  ✗ FAILED: $($_.Exception.Message)\" -ForegroundColor Red\n            $failCount++\n            \n            $remediations += @{ \n                Name = $policyName\n                ReferenceId = $policyRefId\n                Error = $_.Exception.Message\n                Status = \"Failed\" \n            }\n        }\n        \n        Write-Host \"\"\n        $policyNumber++\n    }\n    \n    Write-Host \"========================================\"\n    Write-Host \"REMEDIATION SUMMARY\"\n    Write-Host \"========================================\"\n    Write-Host \"Total Policies: $totalPolicies\"\n    Write-Host \"✓ Successful: $successCount\" -ForegroundColor Green\n    if ($failCount -gt 0) {\n        Write-Host \"✗ Failed: $failCount\" -ForegroundColor Red\n    }\n    Write-Host \"========================================\"\n    Write-Host \"\"\n    \n    if ($successCount -gt 0) {\n        Write-Host \"Remediation tasks are running in the background\" -ForegroundColor Cyan\n        Write-Host \"Check Azure Portal > Policy > Compliance for progress\" -ForegroundColor Cyan\n        Write-Host \"Arc servers will be configured automatically within 15-30 minutes\" -ForegroundColor Cyan\n    }\n    \n    if ($failCount -gt 0) {\n        Write-Host \"\"\n        Write-Host \"Some remediation tasks failed. You can create them manually:\" -ForegroundColor Yellow\n        Write-Host \"  1. Go to Azure Portal > Policy > Compliance\"\n        Write-Host \"  2. Select the policy assignment\"\n        Write-Host \"  3. Click 'Create remediation task' for failed policies\"\n    }\n    \n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['remediations'] = $remediations | ConvertTo-Json -Compress\n    $DeploymentScriptOutputs['totalPolicies'] = $totalPolicies\n    $DeploymentScriptOutputs['successCount'] = $successCount\n    $DeploymentScriptOutputs['failCount'] = $failCount\n    $DeploymentScriptOutputs['status'] = 'Completed'\n}\ncatch {\n    Write-Host \"========================================\"\n    Write-Host \"ERROR\"\n    Write-Host \"========================================\"\n    Write-Host $_.Exception.Message -ForegroundColor Red\n    Write-Host \"\"\n    Write-Host \"You can create remediation tasks manually from Azure Portal\" -ForegroundColor Yellow\n    \n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'Failed'\n    $DeploymentScriptOutputs['error'] = $_.Exception.Message\n}\n"
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('policyAssignment-arc-servers-{0}', parameters('deploymentName')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[parameters('createActionGroup')]",
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[parameters('actionGroupName')]",
      "location": "global",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/actionGroups'), parameters('tagsByResource')['Microsoft.Insights/actionGroups'], json('{}'))]",
      "properties": {
        "copy": [
          {
            "name": "emailReceivers",
            "count": "[length(split(parameters('emailRecipients'), ';'))]",
            "input": {
              "name": "[format('email-{0}', uniqueString(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')]))]",
              "emailAddress": "[trim(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')])]",
              "useCommonAlertSchema": true
            }
          }
        ],
        "groupShortName": "[take(parameters('actionGroupName'), 12)]",
        "enabled": true
      }
    },
    {
      "condition": "[parameters('enableCPUAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-cpu-critical', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('CPU Critical - {0}', parameters('deploymentName'))]",
        "description": "Alert when CPU usage exceeds 95%",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "InsightsMetrics | where Namespace == \"Processor\" and Name == \"UtilizationPercentage\" | where Val > 95 | summarize AggregatedValue = avg(Val) by Computer, _ResourceId, bin(TimeGenerated, 5m)",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 95,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableMemoryAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-memory', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('High Memory Usage - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when Memory usage exceeds {0}%', parameters('memoryThreshold'))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('InsightsMetrics | where Namespace == \"Memory\" and Name == \"AvailableMB\" | extend TotalMemory = todouble(parse_json(Tags)[\"vm.azm.ms/memorySizeMB\"]) | extend UsedPercent = 100.0 - ((Val / TotalMemory) * 100.0) | where UsedPercent > {0} | summarize AggregatedValue = avg(UsedPercent) by Computer, _ResourceId, bin(TimeGenerated, 5m)', parameters('memoryThreshold'))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": "[parameters('memoryThreshold')]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiskAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-disk-critical', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Disk Critical - {0}', parameters('deploymentName'))]",
        "description": "Alert when disk free space is below 5%",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT15M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "InsightsMetrics | where Origin == \"vm.azm.ms\" | where Namespace == \"LogicalDisk\" and Name == \"FreeSpacePercentage\" | extend Disk = tostring(todynamic(Tags)[\"vm.azm.ms/mountId\"]) | extend FreeSpace = Val | summarize FreeSpace = min(FreeSpace) by Computer, Disk, _ResourceId | where FreeSpace < 5",
              "timeAggregation": "Count",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "Disk", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-disk-not-available', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Disk Critical - Not Available - {0}', parameters('deploymentName'))]",
        "description": "Alert when disk metrics stop reporting but machine is sending heartbeat",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT30M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT6H",
        "criteria": {
          "allOf": [
            {
              "query": "let tmp = Heartbeat | where TimeGenerated > ago(6h) | summarize arg_max(TimeGenerated,*) by Computer | extend maxhhearbeat=TimeGenerated | extend cname= tolower(replace_string(Computer,\".softjam.it\",\"\")) | project maxhhearbeat,cname; InsightsMetrics | where Origin == \"vm.azm.ms\" | where Namespace == \"LogicalDisk\" and Name == \"FreeSpacePercentage\" | extend Disk = tostring(todynamic(Tags)[\"vm.azm.ms/mountId\"]) | extend FreeSpace = Val | where TimeGenerated > ago(6h) | extend Computer=tolower(Computer) | summarize arg_max(TimeGenerated, *) by _ResourceId, Computer, Disk | join kind=leftouter tmp on $left.Computer == $right.cname | where TimeGenerated < ago(30min) | where maxhhearbeat > ago(20m)",
              "timeAggregation": "Count",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "Disk", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableHeartbeatAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-heartbeat', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Heartbeat Missing - {0}', parameters('deploymentName'))]",
        "description": "Alert when machine stops sending heartbeat for 10+ minutes",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT10M",
        "scopes": ["[subscription().id]"],
        "targetResourceTypes": ["Microsoft.Compute/virtualMachines", "Microsoft.HybridCompute/machines"],
        "windowSize": "PT1D",
        "criteria": {
          "allOf": [
            {
              "query": "InsightsMetrics | where TimeGenerated > ago(1d) | where Name == \"Heartbeat\" | where Computer != \"sgescheduler01\" | summarize TimeGenerated = max(TimeGenerated) by Computer, _ResourceId | where TimeGenerated < ago(10m)",
              "timeAggregation": "Count",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('enableChangeTracking')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-service-adconnect', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Service Critical - AD Connect - {0}', parameters('deploymentName'))]",
        "description": "Alert when Azure AD Connect services are stopped",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "ConfigurationData | where SvcDisplayName in~ (\"Microsoft Azure AD Sync\", 'Check point identity collector','azure ad connect health sync insights service', 'azure ad connect health sync monitoring service') and SvcState contains \"Stopped\" | order by TimeGenerated desc",
              "timeAggregation": "Count",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "SvcDisplayName", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableChangeTracking')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-service-dc', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Service Critical - Domain Controller - {0}', parameters('deploymentName'))]",
        "description": "Alert when critical Domain Controller services are stopped",
        "severity": 0,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "ConfigurationData | where SvcDisplayName in~ ('active directory web services', 'dfs replication', 'dns server', 'kerberos key distribution center', 'workstation', 'netlogon', 'active directory domain services', 'remote procedure call (rpc)', 'windows time', 'intersite messaging') and Computer in~ ('SAZDC22', 'SAZDC23', 'SGEDC03', 'SGEDC01') and SvcState contains \"Stopped\" | order by TimeGenerated desc",
              "timeAggregation": "Count",
              "dimensions": [
                {"name": "Computer", "operator": "Include", "values": ["*"]},
                {"name": "SvcDisplayName", "operator": "Include", "values": ["*"]},
                {"name": "_ResourceId", "operator": "Include", "values": ["*"]}
              ],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    }
  ],
  "outputs": {
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId)]",
      "metadata": {
        "description": "Principal ID of the Managed Identity"
      }
    },
    "workspaceId": {
      "type": "string",
      "value": "[variables('workspaceId')]",
      "metadata": {
        "description": "Resource ID of the Log Analytics Workspace"
      }
    },
    "workspaceName": {
      "type": "string",
      "value": "[variables('workspaceName')]",
      "metadata": {
        "description": "Name of the Log Analytics Workspace"
      }
    },
    "dcrId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
      "metadata": {
        "description": "Resource ID of the unified Data Collection Rule"
      }
    },
    "changeTrackingDcrId": {
      "type": "string",
      "value": "[if(and(parameters('enableChangeTracking'), parameters('monitorExistingVMs')), reference(format('setup-azure-vms-{0}', parameters('deploymentName'))).outputs.changeTrackingDCRId, if(and(parameters('enableChangeTracking'), parameters('monitorExistingArcServers')), reference(format('setup-arc-servers-{0}', parameters('deploymentName'))).outputs.changeTrackingDCRId, ''))]",
      "metadata": {
        "description": "Resource ID of the Change Tracking Data Collection Rule (created by deployment script)"
      }
    },
    "azureVMPolicyAssignmentId": {
      "type": "string",
      "value": "[if(parameters('enableAzureVMPolicy'), reference(format('policyAssignment-azure-vms-{0}', parameters('deploymentName'))).outputs.policyAssignmentId.value, '')]",
      "condition": "[parameters('enableAzureVMPolicy')]",
      "metadata": {
        "description": "Resource ID of the Azure VM Policy Assignment (if enabled)"
      }
    },
    "arcPolicyAssignmentId": {
      "type": "string",
      "value": "[if(parameters('enableArcPolicy'), reference(format('policyAssignment-arc-servers-{0}', parameters('deploymentName'))).outputs.policyAssignmentId.value, '')]",
      "condition": "[parameters('enableArcPolicy')]",
      "metadata": {
        "description": "Resource ID of the Arc Policy Assignment (if enabled)"
      }
    },
    "actionGroupId": {
      "type": "string",
      "value": "[if(parameters('createActionGroup'), resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName')), '')]",
      "condition": "[parameters('createActionGroup')]",
      "metadata": {
        "description": "Resource ID of the Action Group"
      }
    }
  }
}