{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentName": {
      "type": "string",
      "metadata": {
        "description": "Unique name for this monitoring deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "useExistingLogAnalytics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use an existing Log Analytics workspace"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of existing Log Analytics workspace"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Log Analytics workspace"
      }
    },
    "retentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Number of days to retain data in Log Analytics"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use an existing User-Assigned Managed Identity"
      }
    },
    "existingManagedIdentityId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of existing Managed Identity"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Name of the User-Assigned Managed Identity"
      }
    },
    "dcrNameWindows": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-windows', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Windows Data Collection Rule"
      }
    },
    "dcrNameLinux": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-linux', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Linux Data Collection Rule"
      }
    },
    "monitorExistingVMs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Monitor existing VMs during deployment"
      }
    },
    "monitorAllVMs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Automatically discover and monitor all VMs in subscription"
      }
    },
    "selectedVMIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of VM Resource IDs to monitor"
      }
    },
    "enableAzurePolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Policy for automatic VM enrollment"
      }
    },
    "policyAssignmentName": {
      "type": "string",
      "defaultValue": "[format('ama-monitoring-{0}', parameters('deploymentName'))]",
      "metadata": {
        "description": "Name of the Azure Policy assignment"
      }
    },
    "enableCPUAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable CPU utilization alerts"
      }
    },
    "cpuThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "CPU threshold percentage for alerts"
      }
    },
    "enableMemoryAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable memory utilization alerts"
      }
    },
    "memoryThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "Memory threshold percentage for alerts"
      }
    },
    "enableDiskAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable disk space alerts"
      }
    },
    "diskThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100,
      "metadata": {
        "description": "Disk usage threshold percentage for alerts"
      }
    },
    "enableHeartbeatAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable VM heartbeat alerts"
      }
    },
    "createActionGroup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create an Action Group for alerts"
      }
    },
    "actionGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Action Group"
      }
    },
    "emailRecipients": {
      "type": "string",
      "metadata": {
        "description": "Semicolon-separated email addresses for alert notifications"
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to resources"
      }
    }
  },
  "variables": {
    "workspaceName": "[if(parameters('useExistingLogAnalytics'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], parameters('logAnalyticsWorkspaceName'))]",
    "workspaceId": "[if(parameters('useExistingLogAnalytics'), parameters('existingLogAnalyticsWorkspaceId'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')))]",
    "managedIdentityId": "[if(parameters('useExistingManagedIdentity'), parameters('existingManagedIdentityId'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]"
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingLogAnalytics'))]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.OperationalInsights/workspaces'), parameters('tagsByResource')['Microsoft.OperationalInsights/workspaces'], json('{}'))]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('retentionInDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], json('{}'))]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('roleAssignment-{0}', parameters('deploymentName'))]",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "principalId": {
            "value": "[if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, parameters('principalId'), 'Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "Allows Managed Identity to deploy monitoring resources and configure VMs"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[parameters('dcrNameWindows')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/dataCollectionRules'), parameters('tagsByResource')['Microsoft.Insights/dataCollectionRules'], json('{}'))]",
      "kind": "Windows",
      "properties": {
        "dataSources": {
          "performanceCounters": [
            {
              "name": "VMInsightsPerfCounters",
              "samplingFrequencyInSeconds": 60,
              "streams": ["Microsoft-InsightsMetrics"],
              "counterSpecifiers": [
                "\\VmInsights\\DetailedMetrics"
              ]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "VMInsightsPerf-Logs-Dest",
              "workspaceResourceId": "[variables('workspaceId')]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": ["Microsoft-InsightsMetrics"],
            "destinations": ["VMInsightsPerf-Logs-Dest"]
          }
        ],
        "description": "Data Collection Rule for Windows VM monitoring with VM Insights"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[parameters('dcrNameLinux')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/dataCollectionRules'), parameters('tagsByResource')['Microsoft.Insights/dataCollectionRules'], json('{}'))]",
      "kind": "Linux",
      "properties": {
        "dataSources": {
          "performanceCounters": [
            {
              "name": "VMInsightsPerfCounters",
              "samplingFrequencyInSeconds": 60,
              "streams": ["Microsoft-InsightsMetrics"],
              "counterSpecifiers": [
                "\\VmInsights\\DetailedMetrics"
              ]
            }
          ],
          "syslog": [
            {
              "name": "syslogDataSource",
              "streams": ["Microsoft-Syslog"],
              "facilityNames": ["auth", "authpriv", "cron", "daemon", "kern", "syslog"],
              "logLevels": ["Error", "Critical", "Alert", "Emergency"]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "VMInsightsPerf-Logs-Dest",
              "workspaceResourceId": "[variables('workspaceId')]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": ["Microsoft-InsightsMetrics"],
            "destinations": ["VMInsightsPerf-Logs-Dest"]
          },
          {
            "streams": ["Microsoft-Syslog"],
            "destinations": ["VMInsightsPerf-Logs-Dest"]
          }
        ],
        "description": "Data Collection Rule for Linux VM monitoring with VM Insights"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('monitorExistingVMs')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('setup-and-associate-{0}', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], json('{}'))]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', variables('managedIdentityId'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT1H",
        "timeout": "PT60M",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format('-VMIdsBase64 \"{0}\" -MonitorAllVMs ${1} -DCRWindowsId \"{2}\" -DCRLinuxId \"{3}\"', base64(string(parameters('selectedVMIds'))), parameters('monitorAllVMs'), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows')), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameLinux')))]",
        "scriptContent": "param(\n    [string]$VMIdsBase64,\n    [bool]$MonitorAllVMs,\n    [string]$DCRWindowsId,\n    [string]$DCRLinuxId\n)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"VM Monitoring Setup - Full Automation\"\nWrite-Host \"========================================\"\nWrite-Host \"Monitor All VMs: $MonitorAllVMs\"\nWrite-Host \"DCR Windows ID: $DCRWindowsId\"\nWrite-Host \"DCR Linux ID: $DCRLinuxId\"\nWrite-Host \"\"\n\n# Wait for role propagation\nWrite-Host \"Waiting 60 seconds for role assignment propagation...\"\nStart-Sleep -Seconds 60\n\n$vmArray = @()\n\nif ($MonitorAllVMs) {\n    Write-Host \"Discovering all VMs in subscription...\"\n    try {\n        $allVMs = Get-AzVM -ErrorAction Stop\n        Write-Host \"Found $($allVMs.Count) VMs\"\n        \n        foreach ($vm in $allVMs) {\n            $vmArray += $vm.Id\n            Write-Host \"  - $($vm.Name)\"\n        }\n    }\n    catch {\n        Write-Host \"ERROR: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\nelse {\n    Write-Host \"Decoding VM IDs from Base64...\"\n    \n    try {\n        $VMIdsJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($VMIdsBase64))\n        Write-Host \"Decoded JSON: $VMIdsJson\"\n        \n        if ([string]::IsNullOrWhiteSpace($VMIdsJson) -or $VMIdsJson -eq '[]') {\n            Write-Host \"ERROR: No VMs provided!\" -ForegroundColor Red\n            exit 1\n        }\n        \n        $vmArray = $VMIdsJson | ConvertFrom-Json\n        Write-Host \"Parsed $($vmArray.Count) VM(s)\"\n    }\n    catch {\n        Write-Host \"ERROR: Failed to decode/parse: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\n\nif ($vmArray.Count -eq 0) {\n    Write-Host \"No VMs to process\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'NoVMs'\n    exit 0\n}\n\nWrite-Host \"\"\nWrite-Host \"Processing $($vmArray.Count) VM(s)...\"\nWrite-Host \"\"\n\n$results = @()\n$successCount = 0\n$partialCount = 0\n$failCount = 0\n\nforeach ($vmId in $vmArray) {\n    Write-Host \"========================================\"\n    Write-Host \"Processing: $vmId\" -ForegroundColor Cyan\n    Write-Host \"========================================\"\n    \n    $vmName = $vmId.Split('/')[-1]\n    $vmRG = $vmId.Split('/')[4]\n    \n    Write-Host \"VM Name: $vmName\"\n    Write-Host \"Resource Group: $vmRG\"\n    \n    $amaInstalled = $false\n    $dcrAssociated = $false\n    $vmRunning = $false\n    $vmStatus = \"Unknown\"\n    $errorMessage = \"\"\n    \n    try {\n        # Get VM details\n        $vm = Get-AzVM -ResourceGroupName $vmRG -Name $vmName -ErrorAction Stop\n        $osType = $vm.StorageProfile.OsDisk.OsType\n        $location = $vm.Location\n        \n        # Get VM status\n        $vmStatusObj = Get-AzVM -ResourceGroupName $vmRG -Name $vmName -Status -ErrorAction Stop\n        $powerState = $vmStatusObj.Statuses | Where-Object { $_.Code -like 'PowerState/*' } | Select-Object -First 1\n        $vmStatus = if ($powerState) { $powerState.Code.Replace('PowerState/', '') } else { 'unknown' }\n        $vmRunning = ($vmStatus -eq 'running')\n        \n        Write-Host \"OS Type: $osType\"\n        Write-Host \"Location: $location\"\n        Write-Host \"Status: $vmStatus\" -ForegroundColor $(if ($vmRunning) { 'Green' } else { 'Yellow' })\n        Write-Host \"\"\n        \n        # Determine DCR and extension details\n        $dcrId = if ($osType -eq \"Linux\") { $DCRLinuxId } else { $DCRWindowsId }\n        \n        if ($osType -eq \"Linux\") {\n            $extensionName = \"AzureMonitorLinuxAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorLinuxAgent\"\n            $extensionVersion = \"1.28\"\n        }\n        else {\n            $extensionName = \"AzureMonitorWindowsAgent\"\n            $extensionPublisher = \"Microsoft.Azure.Monitor\"\n            $extensionType = \"AzureMonitorWindowsAgent\"\n            $extensionVersion = \"1.22\"\n        }\n        \n        # Step 1: Check and install AMA (only if VM is running)\n        Write-Host \"[1/2] Azure Monitor Agent...\" -ForegroundColor Yellow\n        \n        if ($vmRunning) {\n            $existingExtension = Get-AzVMExtension `\n                -ResourceGroupName $vmRG `\n                -VMName $vmName `\n                -Name $extensionName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingExtension) {\n                Write-Host \"  ✓ AMA already installed (v$($existingExtension.TypeHandlerVersion))\" -ForegroundColor Green\n                $amaInstalled = $true\n            }\n            else {\n                Write-Host \"  Installing Azure Monitor Agent...\" -ForegroundColor Cyan\n                \n                try {\n                    $extensionResult = Set-AzVMExtension `\n                        -ResourceGroupName $vmRG `\n                        -VMName $vmName `\n                        -Name $extensionName `\n                        -Publisher $extensionPublisher `\n                        -ExtensionType $extensionType `\n                        -TypeHandlerVersion $extensionVersion `\n                        -EnableAutomaticUpgrade $true `\n                        -Location $location `\n                        -ErrorAction Stop\n                    \n                    Write-Host \"  ✓ AMA installed successfully\" -ForegroundColor Green\n                    $amaInstalled = $true\n                }\n                catch {\n                    Write-Host \"  ✗ Failed to install AMA: $($_.Exception.Message)\" -ForegroundColor Red\n                    $errorMessage = \"AMA: $($_.Exception.Message)\"\n                    $amaInstalled = $false\n                }\n            }\n        }\n        else {\n            Write-Host \"  ⚠ VM is stopped - AMA will be installed when VM starts\" -ForegroundColor Yellow\n            $amaInstalled = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Step 2: Associate DCR (works even if VM is stopped)\n        Write-Host \"[2/2] Data Collection Rule Association...\" -ForegroundColor Yellow\n        \n        $associationName = \"dcr-association-$vmName\"\n        \n        try {\n            $existingAssociation = Get-AzDataCollectionRuleAssociation `\n                -TargetResourceId $vmId `\n                -AssociationName $associationName `\n                -ErrorAction SilentlyContinue\n            \n            if ($existingAssociation) {\n                Write-Host \"  ✓ DCR association already exists\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n            else {\n                $association = New-AzDataCollectionRuleAssociation `\n                    -TargetResourceId $vmId `\n                    -AssociationName $associationName `\n                    -DataCollectionRuleId $dcrId `\n                    -ErrorAction Stop\n                \n                Write-Host \"  ✓ DCR associated successfully\" -ForegroundColor Green\n                $dcrAssociated = $true\n            }\n        }\n        catch {\n            Write-Host \"  ✗ Failed to associate DCR: $($_.Exception.Message)\" -ForegroundColor Red\n            if ($errorMessage) {\n                $errorMessage += \"; DCR: $($_.Exception.Message)\"\n            } else {\n                $errorMessage = \"DCR: $($_.Exception.Message)\"\n            }\n            $dcrAssociated = $false\n        }\n        \n        Write-Host \"\"\n        \n        # Determine overall status\n        if ($dcrAssociated) {\n            if ($amaInstalled -or -not $vmRunning) {\n                Write-Host \"✓ VM configured successfully!\" -ForegroundColor Green\n                if (-not $vmRunning) {\n                    Write-Host \"  Note: Start the VM to complete AMA installation\" -ForegroundColor Cyan\n                }\n                $successCount++\n                $status = \"Success\"\n            }\n            else {\n                Write-Host \"⚠ Partially configured (DCR OK, AMA failed)\" -ForegroundColor Yellow\n                $partialCount++\n                $status = \"Partial\"\n            }\n        }\n        else {\n            Write-Host \"✗ Configuration failed\" -ForegroundColor Red\n            $failCount++\n            $status = \"Failed\"\n        }\n        \n        Write-Host \"\"\n        \n        $results += @{\n            VMName = $vmName\n            Status = $status\n            OSType = $osType\n            VMStatus = $vmStatus\n            AMAInstalled = $amaInstalled\n            DCRAssociated = $dcrAssociated\n            Error = $errorMessage\n        }\n    }\n    catch {\n        Write-Host \"\"\n        Write-Host \"✗ FAILED: $($_.Exception.Message)\" -ForegroundColor Red\n        Write-Host \"\"\n        \n        $failCount++\n        \n        $results += @{\n            VMName = $vmName\n            Status = \"Failed\"\n            Error = $_.Exception.Message\n        }\n    }\n}\n\nWrite-Host \"========================================\"\nWrite-Host \"SUMMARY\"\nWrite-Host \"========================================\"\nWrite-Host \"Total VMs: $($vmArray.Count)\"\nWrite-Host \"✓ Fully Configured: $successCount\" -ForegroundColor Green\nif ($partialCount -gt 0) {\n    Write-Host \"⚠ Partially Configured: $partialCount (DCR OK, AMA pending)\" -ForegroundColor Yellow\n}\nif ($failCount -gt 0) {\n    Write-Host \"✗ Failed: $failCount\" -ForegroundColor Red\n}\nWrite-Host \"========================================\"\nWrite-Host \"\"\n\nif ($successCount -gt 0 -or $partialCount -gt 0) {\n    Write-Host \"DCR associations are active on $(($successCount + $partialCount)) VM(s)\" -ForegroundColor Green\n    if ($partialCount -gt 0) {\n        Write-Host \"Start stopped VMs to complete AMA installation\" -ForegroundColor Cyan\n    }\n    Write-Host \"Data will start appearing in Log Analytics within 5-10 minutes after VMs are running\" -ForegroundColor Cyan\n}\n\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['results'] = $results | ConvertTo-Json -Compress\n$DeploymentScriptOutputs['successCount'] = $successCount\n$DeploymentScriptOutputs['partialCount'] = $partialCount\n$DeploymentScriptOutputs['failCount'] = $failCount\n$DeploymentScriptOutputs['totalVMs'] = $vmArray.Count\n$DeploymentScriptOutputs['status'] = 'Completed'\n"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows'))]",
        "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameLinux'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
      ]
    },
    {
  "condition": "[parameters('enableAzurePolicy')]",
  "type": "Microsoft.Resources/deployments",
  "apiVersion": "2022-09-01",
  "name": "[format('policyAssignment-windows-{0}', parameters('deploymentName'))]",
  "subscriptionId": "[subscription().subscriptionId]",
  "location": "[parameters('location')]",
  "properties": {
    "mode": "Incremental",
    "expressionEvaluationOptions": {
      "scope": "inner"
    },
    "parameters": {
      "policyAssignmentName": {
        "value": "[format('{0}-windows', parameters('policyAssignmentName'))]"
      },
      "dcrResourceId": {
        "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows'))]"
      },
      "managedIdentityResourceId": {
        "value": "[variables('managedIdentityId')]"
      },
      "location": {
        "value": "[parameters('location')]"
      }
    },
    "template": {
      "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
      "contentVersion": "1.0.0.0",
      "parameters": {
        "policyAssignmentName": {
          "type": "string"
        },
        "dcrResourceId": {
          "type": "string"
        },
        "managedIdentityResourceId": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      },
      "variables": {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/924bfe3a-762f-40e7-86dd-5c8b95eb09e6"
      },
      "resources": [
        {
          "type": "Microsoft.Authorization/policyAssignments",
          "apiVersion": "2023-04-01",
          "name": "[parameters('policyAssignmentName')]",
          "location": "[parameters('location')]",
          "identity": {
            "type": "SystemAssigned"
          },
          "properties": {
            "displayName": "[format('Enable Azure Monitor for VMs - {0}', parameters('policyAssignmentName'))]",
            "description": "Automatically configures Windows VMs with Azure Monitor Agent using user-assigned managed identity and associates with Data Collection Rule",
            "enforcementMode": "Default",
            "policyDefinitionId": "[variables('policyDefinitionId')]",
            "parameters": {
              "dcrResourceId": {
                "value": "[parameters('dcrResourceId')]"
              },
              "userAssignedManagedIdentityResourceId": {
                "value": "[parameters('managedIdentityResourceId')]"
              }
            },
            "nonComplianceMessages": [
              {
                "message": "Windows VMs must have Azure Monitor Agent installed with user-assigned managed identity and configured with the Data Collection Rule"
              }
            ]
          }
        },
        {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(subscription().id, parameters('policyAssignmentName'), 'Contributor')]",
          "dependsOn": [
            "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
          ],
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
            "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName')), '2023-04-01', 'Full').identity.principalId]",
            "principalType": "ServicePrincipal",
            "description": "Allows policy assignment to deploy AMA and configure VMs"
          }
        },
        {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(subscription().id, parameters('policyAssignmentName'), 'ManagedIdentityOperator')]",
          "dependsOn": [
            "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
          ],
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
            "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName')), '2023-04-01', 'Full').identity.principalId]",
            "principalType": "ServicePrincipal",
            "description": "Allows policy to assign managed identity to VMs"
          }
        },
        {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(subscription().id, parameters('policyAssignmentName'), 'VirtualMachineContributor')]",
          "dependsOn": [
            "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
          ],
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
            "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName')), '2023-04-01', 'Full').identity.principalId]",
            "principalType": "ServicePrincipal",
            "description": "Allows policy to manage VM extensions"
          }
        },
        {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2022-04-01",
          "name": "[guid(subscription().id, parameters('policyAssignmentName'), 'LogAnalyticsContributor')]",
          "dependsOn": [
            "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
          ],
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
            "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName')), '2023-04-01', 'Full').identity.principalId]",
            "principalType": "ServicePrincipal",
            "description": "Allows policy to configure monitoring"
          }
        }
      ],
      "outputs": {
        "policyAssignmentId": {
          "type": "string",
          "value": "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName'))]"
        },
        "policyAssignmentPrincipalId": {
          "type": "string",
          "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('policyAssignmentName')), '2023-04-01', 'Full').identity.principalId]"
        }
      }
    }
  },
  "dependsOn": [
    "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows'))]",
    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
    "[extensionResourceId(format('/subscriptions/{0}', subscription().subscriptionId), 'Microsoft.Resources/deployments', format('roleAssignment-{0}', parameters('deploymentName')))]"
  ]
},
    {
      "condition": "[parameters('createActionGroup')]",
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[parameters('actionGroupName')]",
      "location": "global",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/actionGroups'), parameters('tagsByResource')['Microsoft.Insights/actionGroups'], json('{}'))]",
      "properties": {
        "copy": [
          {
            "name": "emailReceivers",
            "count": "[length(split(parameters('emailRecipients'), ';'))]",
            "input": {
              "name": "[format('email-{0}', uniqueString(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')]))]",
              "emailAddress": "[trim(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')])]",
              "useCommonAlertSchema": true
            }
          }
        ],
        "groupShortName": "[take(parameters('actionGroupName'), 12)]",
        "enabled": true
      }
    },
    {
      "condition": "[parameters('enableCPUAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-cpu', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('High CPU Usage - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when CPU usage exceeds {0}%', parameters('cpuThreshold'))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('InsightsMetrics | where Namespace == \"Processor\" and Name == \"UtilizationPercentage\" | where Val > {0} | summarize AggregatedValue = avg(Val) by Computer, bin(TimeGenerated, 5m)', parameters('cpuThreshold'))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "GreaterThan",
              "threshold": "[parameters('cpuThreshold')]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableMemoryAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-memory', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('High Memory Usage - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when Memory usage exceeds {0}%', parameters('memoryThreshold'))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('InsightsMetrics | where Namespace == \"Memory\" and Name == \"AvailableMB\" | extend TotalMemory = todouble(parse_json(Tags)[\"vm.azm.ms/memorySizeMB\"]) | extend UsedPercent = 100.0 - ((Val / TotalMemory) * 100.0) | where UsedPercent > {0} | summarize AggregatedValue = avg(UsedPercent) by Computer, bin(TimeGenerated, 5m)', parameters('memoryThreshold'))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "GreaterThan",
              "threshold": "[parameters('memoryThreshold')]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiskAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-disk', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('Low Disk Space - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when Disk free space is below {0}%', sub(100, parameters('diskThreshold')))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT15M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('InsightsMetrics | where Namespace == \"LogicalDisk\" and Name == \"FreeSpacePercentage\" | where Val < {0} | summarize AggregatedValue = avg(Val) by Computer, bin(TimeGenerated, 15m)', sub(100, parameters('diskThreshold')))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "LessThan",
              "threshold": "[sub(100, parameters('diskThreshold'))]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableHeartbeatAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-heartbeat', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tagsByResource')['Microsoft.Insights/scheduledQueryRules'], json('{}'))]",
      "properties": {
        "displayName": "[format('VM Heartbeat Missing - {0}', parameters('deploymentName'))]",
        "description": "Alert when VM stops sending heartbeat",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "Heartbeat | summarize LastHeartbeat = max(TimeGenerated) by Computer | where LastHeartbeat < ago(10m)",
              "timeAggregation": "Count",
              "dimensions": [],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    }
  ],
  "outputs": {
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId)]",
      "metadata": {
        "description": "Principal ID of the Managed Identity"
      }
    },
    "workspaceId": {
      "type": "string",
      "value": "[variables('workspaceId')]",
      "metadata": {
        "description": "Resource ID of the Log Analytics Workspace"
      }
    },
    "workspaceName": {
      "type": "string",
      "value": "[variables('workspaceName')]",
      "metadata": {
        "description": "Name of the Log Analytics Workspace"
      }
    },
    "dcrWindowsId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows'))]",
      "metadata": {
        "description": "Resource ID of the Windows Data Collection Rule"
      }
    },
    "dcrLinuxId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameLinux'))]",
      "metadata": {
        "description": "Resource ID of the Linux Data Collection Rule"
      }
    },
    "policyAssignmentId": {
      "type": "string",
      "value": "[if(parameters('enableAzurePolicy'), reference(format('policyAssignment-windows-{0}', parameters('deploymentName'))).outputs.policyAssignmentId.value, '')]",
      "condition": "[parameters('enableAzurePolicy')]",
      "metadata": {
        "description": "Resource ID of the Policy Assignment (if enabled)"
      }
    },
    "actionGroupId": {
      "type": "string",
      "value": "[if(parameters('createActionGroup'), resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName')), '')]",
      "condition": "[parameters('createActionGroup')]",
      "metadata": {
        "description": "Resource ID of the Action Group"
      }
    }
  }
}