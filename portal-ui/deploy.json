{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentName": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "useExistingLogAnalytics": {
      "type": "bool",
      "defaultValue": false
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": ""
    },
    "logAnalyticsWorkspaceName": {
      "type": "string"
    },
    "retentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false
    },
    "existingManagedIdentityId": {
      "type": "string",
      "defaultValue": ""
    },
    "managedIdentityName": {
      "type": "string"
    },
    "dcrNameWindows": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-windows', parameters('deploymentName'))]"
    },
    "dcrNameLinux": {
      "type": "string",
      "defaultValue": "[format('dcr-{0}-linux', parameters('deploymentName'))]"
    },
    "monitorExistingVMs": {
      "type": "bool",
      "defaultValue": false
    },
    "monitorAllVMs": {
      "type": "bool",
      "defaultValue": false
    },
    "selectedVMIds": {
      "type": "array",
      "defaultValue": []
    },
    "enableAzurePolicy": {
      "type": "bool",
      "defaultValue": false
    },
    "enableCPUAlerts": {
      "type": "bool",
      "defaultValue": true
    },
    "cpuThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100
    },
    "enableMemoryAlerts": {
      "type": "bool",
      "defaultValue": true
    },
    "memoryThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100
    },
    "enableDiskAlerts": {
      "type": "bool",
      "defaultValue": true
    },
    "diskThreshold": {
      "type": "int",
      "defaultValue": 85,
      "minValue": 50,
      "maxValue": 100
    },
    "enableHeartbeatAlerts": {
      "type": "bool",
      "defaultValue": true
    },
    "createActionGroup": {
      "type": "bool",
      "defaultValue": true
    },
    "actionGroupName": {
      "type": "string"
    },
    "emailRecipients": {
      "type": "string"
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "workspaceName": "[if(parameters('useExistingLogAnalytics'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], parameters('logAnalyticsWorkspaceName'))]",
    "workspaceId": "[if(parameters('useExistingLogAnalytics'), parameters('existingLogAnalyticsWorkspaceId'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')))]",
    "managedIdentityId": "[if(parameters('useExistingManagedIdentity'), parameters('existingManagedIdentityId'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]"
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingLogAnalytics'))]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('retentionInDays')]"
      }
    },
    {
      "type": "Microsoft.OperationsManagement/solutions",
      "apiVersion": "2015-11-01-preview",
      "name": "[format('VMInsights({0})', variables('workspaceName'))]",
      "location": "[parameters('location')]",
      "plan": {
        "name": "[format('VMInsights({0})', variables('workspaceName'))]",
        "publisher": "Microsoft",
        "product": "OMSGallery/VMInsights",
        "promotionCode": ""
      },
      "properties": {
        "workspaceResourceId": "[variables('workspaceId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[parameters('dcrNameWindows')]",
      "location": "[parameters('location')]",
      "properties": {
        "dataSources": {
          "performanceCounters": [
            {
              "name": "perfCounterDataSource",
              "samplingFrequencyInSeconds": 60,
              "streams": ["Microsoft-Perf"],
              "counterSpecifiers": [
                "\\Processor(_Total)\\% Processor Time",
                "\\Memory\\% Committed Bytes In Use",
                "\\LogicalDisk(_Total)\\% Free Space",
                "\\Network Interface(*)\\Bytes Total/sec"
              ]
            }
          ],
          "windowsEventLogs": [
            {
              "name": "eventLogsDataSource",
              "streams": ["Microsoft-Event"],
              "xPathQueries": [
                "System!*[System[(Level=1 or Level=2 or Level=3)]]",
                "Application!*[System[(Level=1 or Level=2 or Level=3)]]"
              ]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "la-workspace",
              "workspaceResourceId": "[variables('workspaceId')]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": ["Microsoft-Perf", "Microsoft-Event"],
            "destinations": ["la-workspace"]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[parameters('dcrNameLinux')]",
      "location": "[parameters('location')]",
      "properties": {
        "dataSources": {
          "performanceCounters": [
            {
              "name": "perfCounterDataSource",
              "samplingFrequencyInSeconds": 60,
              "streams": ["Microsoft-Perf"],
              "counterSpecifiers": [
                "Processor(*)\\% Processor Time",
                "Memory(*)\\% Used Memory",
                "Logical Disk(*)\\% Used Space",
                "Network(*)\\Total Bytes Transmitted"
              ]
            }
          ],
          "syslog": [
            {
              "name": "syslogDataSource",
              "streams": ["Microsoft-Syslog"],
              "facilityNames": ["auth", "authpriv", "cron", "daemon", "kern", "syslog"],
              "logLevels": ["Error", "Critical", "Alert", "Emergency"]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "la-workspace",
              "workspaceResourceId": "[variables('workspaceId')]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": ["Microsoft-Perf", "Microsoft-Syslog"],
            "destinations": ["la-workspace"]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
  "condition": "[parameters('monitorExistingVMs')]",
  "type": "Microsoft.Resources/deploymentScripts",
  "apiVersion": "2020-10-01",
  "name": "[format('setup-and-associate-{0}', parameters('deploymentName'))]",
  "location": "[parameters('location')]",
  "kind": "AzurePowerShell",
  "identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
      "[format('{0}', variables('managedIdentityId'))]": {}
    }
  },
  "properties": {
    "azPowerShellVersion": "10.0",
    "retentionInterval": "PT1H",
    "timeout": "PT30M",
    "cleanupPreference": "OnSuccess",
    "arguments": "[format('-PrincipalId \"{0}\" -SubscriptionId \"{1}\" -VMIds \"{2}\" -MonitorAllVMs ${3} -DCRWindowsId \"{4}\" -DCRLinuxId \"{5}\"', if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId), subscription().subscriptionId, join(parameters('selectedVMIds'), '|'), parameters('monitorAllVMs'), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows')), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameLinux')))]",
    "scriptContent": "param(\n    [string]$PrincipalId,\n    [string]$SubscriptionId,\n    [string]$VMIds,\n    [bool]$MonitorAllVMs,\n    [string]$DCRWindowsId,\n    [string]$DCRLinuxId\n)\n\n$ErrorActionPreference = 'Stop'\n\nWrite-Host \"========================================\"\nWrite-Host \"PHASE 1: Deploy Role Assignment via Bicep\"\nWrite-Host \"========================================\"\nWrite-Host \"Principal ID: $PrincipalId\"\nWrite-Host \"Subscription ID: $SubscriptionId\"\nWrite-Host \"\"\n\n# Create Bicep file content\n$bicepContent = @'\ntargetScope = 'subscription'\n\nparam managedIdentityPrincipalId string\n\nresource contributorRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {\n  name: guid(subscription().id, managedIdentityPrincipalId, 'Contributor')\n  properties: {\n    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')\n    principalId: managedIdentityPrincipalId\n    principalType: 'ServicePrincipal'\n  }\n}\n'@\n\n# Save Bicep file\n$bicepFile = \"$env:TEMP/roleAssignment.bicep\"\n$bicepContent | Out-File -FilePath $bicepFile -Encoding UTF8\n\nWrite-Host \"Bicep file created at: $bicepFile\"\n\ntry {\n    Write-Host \"Deploying role assignment at subscription level...\"\n    \n    $deployment = New-AzSubscriptionDeployment `\n        -Location 'westeurope' `\n        -TemplateFile $bicepFile `\n        -managedIdentityPrincipalId $PrincipalId `\n        -ErrorAction Stop\n    \n    Write-Host \"SUCCESS: Role assignment deployed!\" -ForegroundColor Green\n    Write-Host \"Deployment name: $($deployment.DeploymentName)\"\n}\ncatch {\n    $errorMsg = $_.Exception.Message\n    \n    if ($errorMsg -like \"*already exists*\" -or $errorMsg -like \"*Conflict*\") {\n        Write-Host \"Role assignment already exists - OK\" -ForegroundColor Yellow\n    }\n    else {\n        Write-Host \"ERROR: $errorMsg\" -ForegroundColor Red\n        throw\n    }\n}\n\nWrite-Host \"\"\nWrite-Host \"Waiting 90 seconds for role propagation...\"\nStart-Sleep -Seconds 90\n\nWrite-Host \"\"\nWrite-Host \"========================================\"\nWrite-Host \"PHASE 2: DCR Association\"\nWrite-Host \"========================================\"\nWrite-Host \"Monitor All VMs: $MonitorAllVMs\"\nWrite-Host \"DCR Windows ID: $DCRWindowsId\"\nWrite-Host \"DCR Linux ID: $DCRLinuxId\"\nWrite-Host \"\"\n\n$vmArray = @()\n\nif ($MonitorAllVMs) {\n    Write-Host \"Discovering all VMs in subscription...\"\n    try {\n        $allVMs = Get-AzVM -ErrorAction Stop\n        Write-Host \"Found $($allVMs.Count) VMs\"\n        \n        foreach ($vm in $allVMs) {\n            $vmArray += $vm.Id\n            Write-Host \"  - $($vm.Name)\"\n        }\n    }\n    catch {\n        Write-Host \"ERROR: $_\" -ForegroundColor Red\n        exit 1\n    }\n}\nelse {\n    Write-Host \"Processing provided VM IDs...\"\n    Write-Host \"Raw VMIds: $VMIds\"\n    \n    if ([string]::IsNullOrWhiteSpace($VMIds)) {\n        Write-Host \"ERROR: No VMs provided!\" -ForegroundColor Red\n        exit 1\n    }\n    \n    $vmArray = $VMIds -split '\\|' | Where-Object { -not [string]::IsNullOrWhiteSpace($_) }\n    Write-Host \"Parsed $($vmArray.Count) VM(s)\"\n    \n    foreach ($vmId in $vmArray) {\n        Write-Host \"  - $vmId\"\n    }\n}\n\nif ($vmArray.Count -eq 0) {\n    Write-Host \"No VMs to process\" -ForegroundColor Yellow\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['status'] = 'NoVMs'\n    exit 0\n}\n\nWrite-Host \"\"\nWrite-Host \"Processing $($vmArray.Count) VM(s)...\"\nWrite-Host \"\"\n\n$results = @()\n$successCount = 0\n$failCount = 0\n\nforeach ($vmId in $vmArray) {\n    Write-Host \"Processing: $vmId\" -ForegroundColor Cyan\n    \n    # Clean the VM ID\n    $vmId = $vmId.Trim().Trim('\"').Trim()\n    \n    $vmName = $vmId.Split('/')[-1]\n    $vmRG = $vmId.Split('/')[4]\n    \n    Write-Host \"  VM Name: $vmName\"\n    Write-Host \"  Resource Group: $vmRG\"\n    \n    try {\n        $vm = Get-AzVM -ResourceGroupName $vmRG -Name $vmName -ErrorAction Stop\n        \n        $dcrId = if ($vm.StorageProfile.OsDisk.OsType -eq \"Linux\") { $DCRLinuxId } else { $DCRWindowsId }\n        $osType = $vm.StorageProfile.OsDisk.OsType\n        \n        Write-Host \"  OS: $osType\"\n        \n        $associationName = \"dcr-association-$vmName\"\n        \n        $association = New-AzDataCollectionRuleAssociation `\n            -TargetResourceId $vmId `\n            -AssociationName $associationName `\n            -DataCollectionRuleId $dcrId `\n            -ErrorAction Stop\n        \n        Write-Host \"  SUCCESS\" -ForegroundColor Green\n        $successCount++\n        \n        $results += @{\n            VMName = $vmName\n            Status = \"Success\"\n            OSType = $osType\n        }\n    }\n    catch {\n        Write-Host \"  FAILED: $_\" -ForegroundColor Red\n        $failCount++\n        \n        $results += @{\n            VMName = $vmName\n            Status = \"Failed\"\n            Error = $_.Exception.Message\n        }\n    }\n}\n\nWrite-Host \"\"\nWrite-Host \"========================================\"\nWrite-Host \"Summary: $successCount succeeded, $failCount failed\"\nWrite-Host \"========================================\"\n\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['results'] = $results | ConvertTo-Json -Compress\n$DeploymentScriptOutputs['successCount'] = $successCount\n$DeploymentScriptOutputs['failCount'] = $failCount\n$DeploymentScriptOutputs['status'] = 'Completed'\n"
  },
  "dependsOn": [
    "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameWindows'))]",
    "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dcrNameLinux'))]",
    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
  ]
},
    {
      "condition": "[parameters('createActionGroup')]",
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[parameters('actionGroupName')]",
      "location": "global",
      "properties": {
        "copy": [
          {
            "name": "emailReceivers",
            "count": "[length(split(parameters('emailRecipients'), ';'))]",
            "input": {
              "name": "[format('email-{0}', uniqueString(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')]))]",
              "emailAddress": "[trim(split(parameters('emailRecipients'), ';')[copyIndex('emailReceivers')])]",
              "useCommonAlertSchema": true
            }
          }
        ],
        "groupShortName": "[take(parameters('actionGroupName'), 12)]",
        "enabled": true
      }
    },
    {
      "condition": "[parameters('enableCPUAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-cpu', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[format('High CPU Usage - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when CPU usage exceeds {0}%', parameters('cpuThreshold'))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('Perf | where ObjectName == \"Processor\" and CounterName == \"% Processor Time\" | where CounterValue > {0} | summarize AggregatedValue = avg(CounterValue) by Computer, bin(TimeGenerated, 5m)', parameters('cpuThreshold'))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "GreaterThan",
              "threshold": "[parameters('cpuThreshold')]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableMemoryAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-memory', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[format('High Memory Usage - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when Memory usage exceeds {0}%', parameters('memoryThreshold'))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('Perf | where ObjectName == \"Memory\" and CounterName == \"% Committed Bytes In Use\" | where CounterValue > {0} | summarize AggregatedValue = avg(CounterValue) by Computer, bin(TimeGenerated, 5m)', parameters('memoryThreshold'))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "GreaterThan",
              "threshold": "[parameters('memoryThreshold')]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiskAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-disk', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[format('Low Disk Space - {0}', parameters('deploymentName'))]",
        "description": "[format('Alert when Disk free space is below {0}%', sub(100, parameters('diskThreshold')))]",
        "severity": 2,
        "enabled": true,
        "evaluationFrequency": "PT15M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "[format('Perf | where ObjectName == \"LogicalDisk\" and CounterName == \"% Free Space\" | where CounterValue < {0} | summarize AggregatedValue = avg(CounterValue) by Computer, InstanceName, bin(TimeGenerated, 15m)', sub(100, parameters('diskThreshold')))]",
              "timeAggregation": "Average",
              "metricMeasureColumn": "AggregatedValue",
              "dimensions": [{"name": "Computer", "operator": "Include", "values": ["*"]}],
              "operator": "LessThan",
              "threshold": "[sub(100, parameters('diskThreshold'))]",
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableHeartbeatAlerts')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('alert-{0}-heartbeat', parameters('deploymentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[format('VM Heartbeat Missing - {0}', parameters('deploymentName'))]",
        "description": "Alert when VM stops sending heartbeat",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT5M",
        "scopes": ["[variables('workspaceId')]"],
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "Heartbeat | summarize LastHeartbeat = max(TimeGenerated) by Computer | where LastHeartbeat < ago(10m)",
              "timeAggregation": "Count",
              "dimensions": [],
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {"numberOfEvaluationPeriods": 1, "minFailingPeriodsToAlert": 1}
            }
          ]
        },
        "actions": {
          "actionGroups": "[if(parameters('createActionGroup'), createArray(resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))), createArray())]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    }
  ],
  "outputs": {
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[if(parameters('useExistingManagedIdentity'), reference(parameters('existingManagedIdentityId'), '2023-01-31').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId)]"
    },
    "workspaceId": {
      "type": "string",
      "value": "[variables('workspaceId')]"
    }
  }
}